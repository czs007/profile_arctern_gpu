<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="437.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="437.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;module&gt; (profile_geo.py:152) (42 samples, 1.47%)</title><rect x="0.4539%" y="52" width="1.4665%" height="15" fill="rgb(227,0,7)"/><text x="0.7039%" y="62.50"></text></g><g><title>gen_st_area_data (profile_geo.py:65) (42 samples, 1.47%)</title><rect x="0.4539%" y="68" width="1.4665%" height="15" fill="rgb(217,0,24)"/><text x="0.7039%" y="78.50"></text></g><g><title>_trans (profile_geo.py:43) (40 samples, 1.40%)</title><rect x="0.5237%" y="84" width="1.3966%" height="15" fill="rgb(221,193,54)"/><text x="0.7737%" y="94.50"></text></g><g><title>__init__ (pandas/core/series.py:305) (39 samples, 1.36%)</title><rect x="0.5587%" y="100" width="1.3617%" height="15" fill="rgb(248,212,6)"/><text x="0.8087%" y="110.50"></text></g><g><title>0x7f27f425a5e8 (libc-2.27.so) (39 samples, 1.36%)</title><rect x="10.8589%" y="292" width="1.3617%" height="15" fill="rgb(208,68,35)"/><text x="11.1089%" y="302.50"></text></g><g><title>0x7f27f425a5eb (libc-2.27.so) (54 samples, 1.89%)</title><rect x="12.2207%" y="292" width="1.8855%" height="15" fill="rgb(232,128,0)"/><text x="12.4707%" y="302.50">0..</text></g><g><title>0x7f27f425a5ef (libc-2.27.so) (38 samples, 1.33%)</title><rect x="14.1061%" y="292" width="1.3268%" height="15" fill="rgb(207,160,47)"/><text x="14.3561%" y="302.50"></text></g><g><title>0x7f27f425a5f3 (libc-2.27.so) (41 samples, 1.43%)</title><rect x="15.4330%" y="292" width="1.4316%" height="15" fill="rgb(228,23,34)"/><text x="15.6830%" y="302.50"></text></g><g><title>0x7f27f425a5f7 (libc-2.27.so) (81 samples, 2.83%)</title><rect x="16.8645%" y="292" width="2.8282%" height="15" fill="rgb(218,30,26)"/><text x="17.1145%" y="302.50">0x..</text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (55 samples, 1.92%)</title><rect x="20.0419%" y="292" width="1.9204%" height="15" fill="rgb(220,122,19)"/><text x="20.2919%" y="302.50">a..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (55 samples, 1.92%)</title><rect x="20.0419%" y="308" width="1.9204%" height="15" fill="rgb(250,228,42)"/><text x="20.2919%" y="318.50">a..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (55 samples, 1.92%)</title><rect x="20.0419%" y="324" width="1.9204%" height="15" fill="rgb(240,193,28)"/><text x="20.2919%" y="334.50">a..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (55 samples, 1.92%)</title><rect x="20.0419%" y="340" width="1.9204%" height="15" fill="rgb(216,20,37)"/><text x="20.2919%" y="350.50">j..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (55 samples, 1.92%)</title><rect x="20.0419%" y="356" width="1.9204%" height="15" fill="rgb(206,188,39)"/><text x="20.2919%" y="366.50">i..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (55 samples, 1.92%)</title><rect x="20.0419%" y="372" width="1.9204%" height="15" fill="rgb(217,207,13)"/><text x="20.2919%" y="382.50">j..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (55 samples, 1.92%)</title><rect x="20.0419%" y="388" width="1.9204%" height="15" fill="rgb(231,73,38)"/><text x="20.2919%" y="398.50">j..</text></g><g><title>memcpy (string3.h:52) (55 samples, 1.92%)</title><rect x="20.0419%" y="404" width="1.9204%" height="15" fill="rgb(225,20,46)"/><text x="20.2919%" y="414.50">m..</text></g><g><title>arrow::Status::Status (libarrow_python.so.16.0.0) (48 samples, 1.68%)</title><rect x="21.9623%" y="292" width="1.6760%" height="15" fill="rgb(210,31,41)"/><text x="22.2123%" y="302.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (493 samples, 17.21%)</title><rect x="6.5293%" y="276" width="17.2137%" height="15" fill="rgb(221,200,47)"/><text x="6.7793%" y="286.50">arrow::BaseBinaryBuilder&lt;ar..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (643 samples, 22.45%)</title><rect x="5.0628%" y="260" width="22.4511%" height="15" fill="rgb(226,26,5)"/><text x="5.3128%" y="270.50">arrow::py::detail::BuilderAppend (li..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (78 samples, 2.72%)</title><rect x="24.7905%" y="276" width="2.7235%" height="15" fill="rgb(249,33,26)"/><text x="25.0405%" y="286.50">ar..</text></g><g><title>arrow::py::PyBytesView::FromBinary (libarrow_python.so.16.0.0) (40 samples, 1.40%)</title><rect x="26.1173%" y="292" width="1.3966%" height="15" fill="rgb(235,183,28)"/><text x="26.3673%" y="302.50"></text></g><g><title>ST_Area (arctern/_wrapper_func.py:838) (726 samples, 25.35%)</title><rect x="2.4441%" y="116" width="25.3492%" height="15" fill="rgb(221,5,38)"/><text x="2.6941%" y="126.50">ST_Area (arctern/_wrapper_func.py:838)</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (726 samples, 25.35%)</title><rect x="2.4441%" y="132" width="25.3492%" height="15" fill="rgb(247,18,42)"/><text x="2.6941%" y="142.50">array (pyarrow/lib.cpython-38-x86_64-lin..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (726 samples, 25.35%)</title><rect x="2.4441%" y="148" width="25.3492%" height="15" fill="rgb(241,131,45)"/><text x="2.6941%" y="158.50">lib__ndarray_to_array (pyarrow/lib.cpyth..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (726 samples, 25.35%)</title><rect x="2.4441%" y="164" width="25.3492%" height="15" fill="rgb(249,31,29)"/><text x="2.6941%" y="174.50">arrow::py::NdarrayToArrow (libarrow_pyth..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (726 samples, 25.35%)</title><rect x="2.4441%" y="180" width="25.3492%" height="15" fill="rgb(225,111,53)"/><text x="2.6941%" y="190.50">arrow::py::NumPyConverter::Convert (liba..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (726 samples, 25.35%)</title><rect x="2.4441%" y="196" width="25.3492%" height="15" fill="rgb(238,160,17)"/><text x="2.6941%" y="206.50">arrow::py::ConvertPySequence (libarrow_p..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (726 samples, 25.35%)</title><rect x="2.4441%" y="212" width="25.3492%" height="15" fill="rgb(214,148,48)"/><text x="2.6941%" y="222.50">arrow::py::TypedConverter&lt;arrow::BinaryT..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (726 samples, 25.35%)</title><rect x="2.4441%" y="228" width="25.3492%" height="15" fill="rgb(232,36,49)"/><text x="2.6941%" y="238.50">arrow::py::internal::VisitSequenceGeneri..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (688 samples, 24.02%)</title><rect x="3.7709%" y="244" width="24.0223%" height="15" fill="rgb(209,103,24)"/><text x="4.0209%" y="254.50">arrow::py::TypedConverter&lt;arrow::Binar..</text></g><g><title>OGRLinearRing::~OGRLinearRing (libgdal.so.26.0.4) (73 samples, 2.55%)</title><rect x="29.7486%" y="324" width="2.5489%" height="15" fill="rgb(229,88,8)"/><text x="29.9986%" y="334.50">OG..</text></g><g><title>OGRSimpleCurve::~OGRSimpleCurve (libgdal.so.26.0.4) (53 samples, 1.85%)</title><rect x="30.4469%" y="340" width="1.8506%" height="15" fill="rgb(213,181,19)"/><text x="30.6969%" y="350.50">O..</text></g><g><title>cfree (libc-2.27.so) (40 samples, 1.40%)</title><rect x="30.9008%" y="356" width="1.3966%" height="15" fill="rgb(254,191,54)"/><text x="31.1508%" y="366.50"></text></g><g><title>cfree (libc-2.27.so) (165 samples, 5.76%)</title><rect x="32.2975%" y="324" width="5.7612%" height="15" fill="rgb(241,83,37)"/><text x="32.5475%" y="334.50">cfree (..</text></g><g><title>OGRCurveCollection::empty (libgdal.so.26.0.4) (266 samples, 9.29%)</title><rect x="28.8757%" y="308" width="9.2877%" height="15" fill="rgb(233,36,39)"/><text x="29.1257%" y="318.50">OGRCurveColle..</text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (275 samples, 9.60%)</title><rect x="28.6313%" y="292" width="9.6020%" height="15" fill="rgb(226,3,54)"/><text x="28.8813%" y="302.50">OGRCurvePolygo..</text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (284 samples, 9.92%)</title><rect x="28.4218%" y="276" width="9.9162%" height="15" fill="rgb(245,192,40)"/><text x="28.6718%" y="286.50">OGRPolygon::~O..</text></g><g><title>OGRCurveCollection::assignSpatialReference (libgdal.so.26.0.4) (40 samples, 1.40%)</title><rect x="42.1788%" y="324" width="1.3966%" height="15" fill="rgb(238,167,29)"/><text x="42.4288%" y="334.50"></text></g><g><title>operator new (new_op.cc:50) (46 samples, 1.61%)</title><rect x="46.8575%" y="356" width="1.6061%" height="15" fill="rgb(232,182,51)"/><text x="47.1075%" y="366.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (40 samples, 1.40%)</title><rect x="47.0670%" y="372" width="1.3966%" height="15" fill="rgb(231,60,39)"/><text x="47.3170%" y="382.50"></text></g><g><title>operator new (new_opnt.cc:42) (59 samples, 2.06%)</title><rect x="46.4735%" y="340" width="2.0601%" height="15" fill="rgb(208,69,12)"/><text x="46.7235%" y="350.50">o..</text></g><g><title>OGRGeometryFactory::createGeometry (libgdal.so.26.0.4) (134 samples, 4.68%)</title><rect x="43.9595%" y="324" width="4.6788%" height="15" fill="rgb(235,93,37)"/><text x="44.2095%" y="334.50">OGRGe..</text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (80 samples, 2.79%)</title><rect x="58.7291%" y="388" width="2.7933%" height="15" fill="rgb(213,116,39)"/><text x="58.9791%" y="398.50">OG..</text></g><g><title>OGRGeometry::importPreambleFromWkb (libgdal.so.26.0.4) (152 samples, 5.31%)</title><rect x="57.1578%" y="372" width="5.3073%" height="15" fill="rgb(222,207,29)"/><text x="57.4078%" y="382.50">OGRGeo..</text></g><g><title>OGRGeometry::importPreambleOfCollectionFromWkb (libgdal.so.26.0.4) (327 samples, 11.42%)</title><rect x="51.3617%" y="356" width="11.4176%" height="15" fill="rgb(206,96,30)"/><text x="51.6117%" y="366.50">OGRGeometry::impo..</text></g><g><title>OGRCurveCollection::importPreambleFromWkb (libgdal.so.26.0.4) (605 samples, 21.12%)</title><rect x="50.6285%" y="340" width="21.1243%" height="15" fill="rgb(218,138,4)"/><text x="50.8785%" y="350.50">OGRCurveCollection::importPreambl..</text></g><g><title>VSICallocVerbose (libgdal.so.26.0.4) (257 samples, 8.97%)</title><rect x="62.7793%" y="356" width="8.9735%" height="15" fill="rgb(250,191,14)"/><text x="63.0293%" y="366.50">VSICallocVerb..</text></g><g><title>__libc_calloc (libc-2.27.so) (243 samples, 8.48%)</title><rect x="63.2682%" y="372" width="8.4846%" height="15" fill="rgb(239,60,40)"/><text x="63.5182%" y="382.50">__libc_callo..</text></g><g><title>0x7f27f42336c2 (libc-2.27.so) (59 samples, 2.06%)</title><rect x="69.6927%" y="388" width="2.0601%" height="15" fill="rgb(206,27,48)"/><text x="69.9427%" y="398.50">0..</text></g><g><title>OGRLinearRing::OGRLinearRing (libgdal.so.26.0.4) (37 samples, 1.29%)</title><rect x="71.7528%" y="340" width="1.2919%" height="15" fill="rgb(225,35,8)"/><text x="72.0028%" y="350.50"></text></g><g><title>OGRLineString::OGRLineString (libgdal.so.26.0.4) (29 samples, 1.01%)</title><rect x="72.0321%" y="356" width="1.0126%" height="15" fill="rgb(250,213,24)"/><text x="72.2821%" y="366.50"></text></g><g><title>__libc_malloc (libc-2.27.so) (35 samples, 1.22%)</title><rect x="79.2598%" y="388" width="1.2221%" height="15" fill="rgb(247,123,22)"/><text x="79.5098%" y="398.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (99 samples, 3.46%)</title><rect x="77.7584%" y="356" width="3.4567%" height="15" fill="rgb(231,138,38)"/><text x="78.0084%" y="366.50">OGR..</text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (68 samples, 2.37%)</title><rect x="78.8408%" y="372" width="2.3743%" height="15" fill="rgb(231,145,46)"/><text x="79.0908%" y="382.50">VS..</text></g><g><title>OGRLinearRing::_importFromWkb (libgdal.so.26.0.4) (237 samples, 8.28%)</title><rect x="73.0447%" y="340" width="8.2751%" height="15" fill="rgb(251,118,11)"/><text x="73.2947%" y="350.50">OGRLinearRin..</text></g><g><title>OGRPolygon::importFromWkb (libgdal.so.26.0.4) (972 samples, 33.94%)</title><rect x="48.7430%" y="324" width="33.9385%" height="15" fill="rgb(217,147,25)"/><text x="48.9930%" y="334.50">OGRPolygon::importFromWkb (libgdal.so.26.0.4)</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkb (libarctern.so) (1,364 samples, 47.63%)</title><rect x="38.3380%" y="276" width="47.6257%" height="15" fill="rgb(247,81,37)"/><text x="38.5880%" y="286.50">arctern::gis::gdal::Wrapper_createFromWkb (libarctern.so)</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (1,302 samples, 45.46%)</title><rect x="40.5028%" y="292" width="45.4609%" height="15" fill="rgb(209,12,38)"/><text x="40.7528%" y="302.50">OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4)</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (1,292 samples, 45.11%)</title><rect x="40.8520%" y="308" width="45.1117%" height="15" fill="rgb(227,1,9)"/><text x="41.1020%" y="318.50">OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4)</text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (94 samples, 3.28%)</title><rect x="82.6816%" y="324" width="3.2821%" height="15" fill="rgb(248,47,43)"/><text x="82.9316%" y="334.50">OGR..</text></g><g><title>cfree (libc-2.27.so) (46 samples, 1.61%)</title><rect x="85.9637%" y="276" width="1.6061%" height="15" fill="rgb(221,10,30)"/><text x="86.2137%" y="286.50"></text></g><g><title>arctern::gis::gdal::AreaVisitor::visit (libarctern.so) (188 samples, 6.56%)</title><rect x="89.8743%" y="292" width="6.5642%" height="15" fill="rgb(210,229,1)"/><text x="90.1243%" y="302.50">arctern::..</text></g><g><title>OGRCurvePolygon::get_Area (libgdal.so.26.0.4) (176 samples, 6.15%)</title><rect x="90.2933%" y="308" width="6.1453%" height="15" fill="rgb(222,148,37)"/><text x="90.5433%" y="318.50">OGRCurve..</text></g><g><title>OGRSimpleCurve::get_LinearArea (libgdal.so.26.0.4) (110 samples, 3.84%)</title><rect x="92.5978%" y="324" width="3.8408%" height="15" fill="rgb(234,67,33)"/><text x="92.8478%" y="334.50">OGRS..</text></g><g><title>wrapper (profile_geo.py:30) (2,786 samples, 97.28%)</title><rect x="2.4441%" y="68" width="97.2765%" height="15" fill="rgb(247,98,35)"/><text x="2.6941%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Area (profile_geo.py:104) (2,786 samples, 97.28%)</title><rect x="2.4441%" y="84" width="97.2765%" height="15" fill="rgb(247,138,52)"/><text x="2.6941%" y="94.50">test_ST_Area (profile_geo.py:104)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (2,786 samples, 97.28%)</title><rect x="2.4441%" y="100" width="97.2765%" height="15" fill="rgb(213,79,30)"/><text x="2.6941%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>ST_Area (arctern/_wrapper_func.py:839) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="116" width="71.9274%" height="15" fill="rgb(246,177,23)"/><text x="28.0433%" y="126.50">ST_Area (arctern/_wrapper_func.py:839)</text></g><g><title>ST_Area (arctern_core_.pyx:123) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="132" width="71.9274%" height="15" fill="rgb(230,62,27)"/><text x="28.0433%" y="142.50">ST_Area (arctern_core_.pyx:123)</text></g><g><title>ST_Area (arctern_core_.pyx:124) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="148" width="71.9274%" height="15" fill="rgb(216,154,8)"/><text x="28.0433%" y="158.50">ST_Area (arctern_core_.pyx:124)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="164" width="71.9274%" height="15" fill="rgb(244,35,45)"/><text x="28.0433%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="180" width="71.9274%" height="15" fill="rgb(251,115,12)"/><text x="28.0433%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="196" width="71.9274%" height="15" fill="rgb(240,54,50)"/><text x="28.0433%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="212" width="71.9274%" height="15" fill="rgb(233,84,52)"/><text x="28.0433%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Area (libarctern.so) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="228" width="71.9274%" height="15" fill="rgb(207,117,47)"/><text x="28.0433%" y="238.50">arctern::gis::ST_Area (libarctern.so)</text></g><g><title>arctern::gis::gdal::ST_Area (libarctern.so) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="244" width="71.9274%" height="15" fill="rgb(249,43,39)"/><text x="28.0433%" y="254.50">arctern::gis::gdal::ST_Area (libarctern.so)</text></g><g><title>arctern::gis::gdal::UnaryOp&lt;arrow::NumericBuilder&lt;arrow::DoubleType&gt; &gt; (libarctern.so) (2,060 samples, 71.93%)</title><rect x="27.7933%" y="260" width="71.9274%" height="15" fill="rgb(209,38,44)"/><text x="28.0433%" y="270.50">arctern::gis::gdal::UnaryOp&lt;arrow::NumericBuilder&lt;arrow::DoubleType&gt; &gt; (libarctern.so)</text></g><g><title>std::_Function_handler&lt;void (arrow::NumericBuilder&lt;arrow::DoubleType&gt;&amp;, OGRGeometry*), arctern::gis::gdal::ST_Area(std::shared_ptr&lt;arrow::Array&gt; const&amp;)::{lambda(arrow::NumericBuilder&lt;arrow::DoubleType&gt;&amp;, OGRGeometry*)#1}&gt;::_M_invoke (libarctern.so) (343 samples, 11.98%)</title><rect x="87.7444%" y="276" width="11.9763%" height="15" fill="rgb(236,212,23)"/><text x="87.9944%" y="286.50">std::_Function_han..</text></g><g><title>arrow::NumericBuilder&lt;arrow::DoubleType&gt;::Append (libarctern.so) (94 samples, 3.28%)</title><rect x="96.4385%" y="292" width="3.2821%" height="15" fill="rgb(242,79,21)"/><text x="96.6885%" y="302.50">arr..</text></g><g><title>&lt;module&gt; (profile_geo.py:164) (2,787 samples, 97.31%)</title><rect x="2.4441%" y="52" width="97.3115%" height="15" fill="rgb(211,96,35)"/><text x="2.6941%" y="62.50">&lt;module&gt; (profile_geo.py:164)</text></g><g><title>all (2,864 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(253,215,40)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>