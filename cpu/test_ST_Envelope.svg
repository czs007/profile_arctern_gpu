<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="501.00"> </text><svg id="frames" x="10" width="1180"><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (137 samples, 2.16%)</title><rect x="7.3071%" y="292" width="2.1575%" height="15" fill="rgb(227,0,7)"/><text x="7.5571%" y="302.50">a..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (137 samples, 2.16%)</title><rect x="7.3071%" y="308" width="2.1575%" height="15" fill="rgb(217,0,24)"/><text x="7.5571%" y="318.50">a..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (137 samples, 2.16%)</title><rect x="7.3071%" y="324" width="2.1575%" height="15" fill="rgb(221,193,54)"/><text x="7.5571%" y="334.50">a..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (137 samples, 2.16%)</title><rect x="7.3071%" y="340" width="2.1575%" height="15" fill="rgb(248,212,6)"/><text x="7.5571%" y="350.50">j..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (137 samples, 2.16%)</title><rect x="7.3071%" y="356" width="2.1575%" height="15" fill="rgb(208,68,35)"/><text x="7.5571%" y="366.50">i..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (137 samples, 2.16%)</title><rect x="7.3071%" y="372" width="2.1575%" height="15" fill="rgb(232,128,0)"/><text x="7.5571%" y="382.50">j..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (137 samples, 2.16%)</title><rect x="7.3071%" y="388" width="2.1575%" height="15" fill="rgb(207,160,47)"/><text x="7.5571%" y="398.50">j..</text></g><g><title>memcpy (string3.h:52) (137 samples, 2.16%)</title><rect x="7.3071%" y="404" width="2.1575%" height="15" fill="rgb(228,23,34)"/><text x="7.5571%" y="414.50">m..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (448 samples, 7.06%)</title><rect x="3.0236%" y="276" width="7.0551%" height="15" fill="rgb(218,30,26)"/><text x="3.2736%" y="286.50">arrow::Ba..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (606 samples, 9.54%)</title><rect x="2.5197%" y="260" width="9.5433%" height="15" fill="rgb(220,122,19)"/><text x="2.7697%" y="270.50">arrow::py::det..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (105 samples, 1.65%)</title><rect x="10.4094%" y="276" width="1.6535%" height="15" fill="rgb(250,228,42)"/><text x="10.6594%" y="286.50"></text></g><g><title>ST_Envelope (arctern/_wrapper_func.py:1039) (697 samples, 10.98%)</title><rect x="1.1811%" y="116" width="10.9764%" height="15" fill="rgb(240,193,28)"/><text x="1.4311%" y="126.50">ST_Envelope (arc..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (697 samples, 10.98%)</title><rect x="1.1811%" y="132" width="10.9764%" height="15" fill="rgb(216,20,37)"/><text x="1.4311%" y="142.50">array (pyarrow/l..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (697 samples, 10.98%)</title><rect x="1.1811%" y="148" width="10.9764%" height="15" fill="rgb(206,188,39)"/><text x="1.4311%" y="158.50">lib__ndarray_to_..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (697 samples, 10.98%)</title><rect x="1.1811%" y="164" width="10.9764%" height="15" fill="rgb(217,207,13)"/><text x="1.4311%" y="174.50">arrow::py::Ndarr..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (697 samples, 10.98%)</title><rect x="1.1811%" y="180" width="10.9764%" height="15" fill="rgb(231,73,38)"/><text x="1.4311%" y="190.50">arrow::py::NumPy..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (697 samples, 10.98%)</title><rect x="1.1811%" y="196" width="10.9764%" height="15" fill="rgb(225,20,46)"/><text x="1.4311%" y="206.50">arrow::py::Conve..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (697 samples, 10.98%)</title><rect x="1.1811%" y="212" width="10.9764%" height="15" fill="rgb(210,31,41)"/><text x="1.4311%" y="222.50">arrow::py::Typed..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (697 samples, 10.98%)</title><rect x="1.1811%" y="228" width="10.9764%" height="15" fill="rgb(221,200,47)"/><text x="1.4311%" y="238.50">arrow::py::inter..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (658 samples, 10.36%)</title><rect x="1.7953%" y="244" width="10.3622%" height="15" fill="rgb(226,26,5)"/><text x="2.0453%" y="254.50">arrow::py::Type..</text></g><g><title>OGRLineString::~OGRLineString (libgdal.so.26.0.4) (138 samples, 2.17%)</title><rect x="12.5039%" y="276" width="2.1732%" height="15" fill="rgb(249,33,26)"/><text x="12.7539%" y="286.50">O..</text></g><g><title>OGRSimpleCurve::~OGRSimpleCurve (libgdal.so.26.0.4) (116 samples, 1.83%)</title><rect x="12.8504%" y="292" width="1.8268%" height="15" fill="rgb(235,183,28)"/><text x="13.1004%" y="302.50">O..</text></g><g><title>cfree (libc-2.27.so) (91 samples, 1.43%)</title><rect x="13.2441%" y="308" width="1.4331%" height="15" fill="rgb(221,5,38)"/><text x="13.4941%" y="318.50"></text></g><g><title>operator new (new_op.cc:50) (64 samples, 1.01%)</title><rect x="18.2205%" y="356" width="1.0079%" height="15" fill="rgb(247,18,42)"/><text x="18.4705%" y="366.50"></text></g><g><title>operator new (new_opnt.cc:42) (71 samples, 1.12%)</title><rect x="18.1417%" y="340" width="1.1181%" height="15" fill="rgb(241,131,45)"/><text x="18.3917%" y="350.50"></text></g><g><title>OGRGeometryFactory::createGeometry (libgdal.so.26.0.4) (156 samples, 2.46%)</title><rect x="16.8819%" y="324" width="2.4567%" height="15" fill="rgb(249,31,29)"/><text x="17.1319%" y="334.50">OG..</text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (102 samples, 1.61%)</title><rect x="19.3386%" y="324" width="1.6063%" height="15" fill="rgb(225,111,53)"/><text x="19.5886%" y="334.50"></text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (89 samples, 1.40%)</title><rect x="26.0000%" y="372" width="1.4016%" height="15" fill="rgb(238,160,17)"/><text x="26.2500%" y="382.50"></text></g><g><title>OGRGeometry::importPreambleFromWkb (libgdal.so.26.0.4) (180 samples, 2.83%)</title><rect x="25.1024%" y="356" width="2.8346%" height="15" fill="rgb(214,148,48)"/><text x="25.3524%" y="366.50">OG..</text></g><g><title>OGRGeometry::importPreambleOfCollectionFromWkb (libgdal.so.26.0.4) (356 samples, 5.61%)</title><rect x="23.3543%" y="340" width="5.6063%" height="15" fill="rgb(232,36,49)"/><text x="23.6043%" y="350.50">OGRGeom..</text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (78 samples, 1.23%)</title><rect x="28.9606%" y="340" width="1.2283%" height="15" fill="rgb(209,103,24)"/><text x="29.2106%" y="350.50"></text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkb (libarctern.so) (987 samples, 15.54%)</title><rect x="14.6772%" y="276" width="15.5433%" height="15" fill="rgb(229,88,8)"/><text x="14.9272%" y="286.50">arctern::gis::gdal::Wrap..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (918 samples, 14.46%)</title><rect x="15.7638%" y="292" width="14.4567%" height="15" fill="rgb(213,181,19)"/><text x="16.0138%" y="302.50">OGRGeometryFactory::cr..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (911 samples, 14.35%)</title><rect x="15.8740%" y="308" width="14.3465%" height="15" fill="rgb(254,191,54)"/><text x="16.1240%" y="318.50">OGRGeometryFactory::cr..</text></g><g><title>OGRSimpleCurve::importFromWkb (libgdal.so.26.0.4) (589 samples, 9.28%)</title><rect x="20.9449%" y="324" width="9.2756%" height="15" fill="rgb(241,83,37)"/><text x="21.1949%" y="334.50">OGRSimpleCurv..</text></g><g><title>cfree (libc-2.27.so) (82 samples, 1.29%)</title><rect x="30.2205%" y="276" width="1.2913%" height="15" fill="rgb(233,36,39)"/><text x="30.4705%" y="286.50"></text></g><g><title>OGRCurveCollection::addCurveDirectly (libgdal.so.26.0.4) (98 samples, 1.54%)</title><rect x="33.1181%" y="308" width="1.5433%" height="15" fill="rgb(226,3,54)"/><text x="33.3681%" y="318.50"></text></g><g><title>OGRCurvePolygon::addRingDirectlyInternal (libgdal.so.26.0.4) (79 samples, 1.24%)</title><rect x="35.0079%" y="308" width="1.2441%" height="15" fill="rgb(245,192,40)"/><text x="35.2579%" y="318.50"></text></g><g><title>OGRPolygon::checkRing (libgdal.so.26.0.4) (67 samples, 1.06%)</title><rect x="35.1969%" y="324" width="1.0551%" height="15" fill="rgb(238,167,29)"/><text x="35.4469%" y="334.50"></text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (123 samples, 1.94%)</title><rect x="38.6299%" y="340" width="1.9370%" height="15" fill="rgb(232,182,51)"/><text x="38.8799%" y="350.50">O..</text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (89 samples, 1.40%)</title><rect x="39.1654%" y="356" width="1.4016%" height="15" fill="rgb(231,60,39)"/><text x="39.4154%" y="366.50"></text></g><g><title>OGRSimpleCurve::setPoints (libgdal.so.26.0.4) (181 samples, 2.85%)</title><rect x="37.7323%" y="324" width="2.8504%" height="15" fill="rgb(208,69,12)"/><text x="37.9823%" y="334.50">OG..</text></g><g><title>OGRCurvePolygon::addRing (libgdal.so.26.0.4) (518 samples, 8.16%)</title><rect x="32.9449%" y="292" width="8.1575%" height="15" fill="rgb(235,93,37)"/><text x="33.1949%" y="302.50">OGRCurvePol..</text></g><g><title>OGRLinearRing::clone (libgdal.so.26.0.4) (308 samples, 4.85%)</title><rect x="36.2520%" y="308" width="4.8504%" height="15" fill="rgb(213,116,39)"/><text x="36.5020%" y="318.50">OGRLin..</text></g><g><title>OGRLinearRing::~OGRLinearRing (libgdal.so.26.0.4) (123 samples, 1.94%)</title><rect x="42.1575%" y="324" width="1.9370%" height="15" fill="rgb(222,207,29)"/><text x="42.4075%" y="334.50">O..</text></g><g><title>OGRSimpleCurve::~OGRSimpleCurve (libgdal.so.26.0.4) (80 samples, 1.26%)</title><rect x="42.8346%" y="340" width="1.2598%" height="15" fill="rgb(206,96,30)"/><text x="43.0846%" y="350.50"></text></g><g><title>cfree (libc-2.27.so) (117 samples, 1.84%)</title><rect x="44.1417%" y="324" width="1.8425%" height="15" fill="rgb(218,138,4)"/><text x="44.3917%" y="334.50">c..</text></g><g><title>OGRCurveCollection::empty (libgdal.so.26.0.4) (301 samples, 4.74%)</title><rect x="41.4488%" y="308" width="4.7402%" height="15" fill="rgb(250,191,14)"/><text x="41.6988%" y="318.50">OGRCur..</text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (324 samples, 5.10%)</title><rect x="41.1024%" y="292" width="5.1024%" height="15" fill="rgb(239,60,40)"/><text x="41.3524%" y="302.50">OGRCur..</text></g><g><title>0x7fbc79b286c2 (libc-2.27.so) (113 samples, 1.78%)</title><rect x="69.9213%" y="372" width="1.7795%" height="15" fill="rgb(206,27,48)"/><text x="70.1713%" y="382.50">0..</text></g><g><title>0x7fbc79b298f5 (libc-2.27.so) (348 samples, 5.48%)</title><rect x="67.0709%" y="356" width="5.4803%" height="15" fill="rgb(225,35,8)"/><text x="67.3209%" y="366.50">0x7fbc7..</text></g><g><title>0x7fbc79b299a0 (libc-2.27.so) (158 samples, 2.49%)</title><rect x="73.4961%" y="356" width="2.4882%" height="15" fill="rgb(250,213,24)"/><text x="73.7461%" y="366.50">0x..</text></g><g><title>OGRSimpleCurve::setPoint (libgdal.so.26.0.4) (1,728 samples, 27.21%)</title><rect x="48.9291%" y="292" width="27.2126%" height="15" fill="rgb(247,123,22)"/><text x="49.1791%" y="302.50">OGRSimpleCurve::setPoint (libgdal.so.26.0.4)</text></g><g><title>OGRSimpleCurve::setNumPoints (libgdal.so.26.0.4) (1,646 samples, 25.92%)</title><rect x="50.2205%" y="308" width="25.9213%" height="15" fill="rgb(231,138,38)"/><text x="50.4705%" y="318.50">OGRSimpleCurve::setNumPoints (libgdal.so...</text></g><g><title>VSIReallocVerbose (libgdal.so.26.0.4) (1,459 samples, 22.98%)</title><rect x="53.1654%" y="324" width="22.9764%" height="15" fill="rgb(231,145,46)"/><text x="53.4154%" y="334.50">VSIReallocVerbose (libgdal.so.26.0.4)</text></g><g><title>__libc_realloc (libc-2.27.so) (1,321 samples, 20.80%)</title><rect x="55.3386%" y="340" width="20.8031%" height="15" fill="rgb(251,118,11)"/><text x="55.5886%" y="350.50">__libc_realloc (libc-2.27.so)</text></g><g><title>OGRSimpleCurve::~OGRSimpleCurve (libgdal.so.26.0.4) (152 samples, 2.39%)</title><rect x="76.1417%" y="292" width="2.3937%" height="15" fill="rgb(217,147,25)"/><text x="76.3917%" y="302.50">OG..</text></g><g><title>cfree (libc-2.27.so) (121 samples, 1.91%)</title><rect x="76.6299%" y="308" width="1.9055%" height="15" fill="rgb(247,81,37)"/><text x="76.8799%" y="318.50">c..</text></g><g><title>CPLMalloc (libgdal.so.26.0.4) (78 samples, 1.23%)</title><rect x="78.9921%" y="308" width="1.2283%" height="15" fill="rgb(209,12,38)"/><text x="79.2421%" y="318.50"></text></g><g><title>OGRPolygon::exportToWkb (libgdal.so.26.0.4) (133 samples, 2.09%)</title><rect x="81.3228%" y="308" width="2.0945%" height="15" fill="rgb(227,1,9)"/><text x="81.5728%" y="318.50">O..</text></g><g><title>0x7fbc79c22c14 (libc-2.27.so) (111 samples, 1.75%)</title><rect x="86.4724%" y="340" width="1.7480%" height="15" fill="rgb(248,47,43)"/><text x="86.7224%" y="350.50"></text></g><g><title>0x7fbc79c22c18 (libc-2.27.so) (100 samples, 1.57%)</title><rect x="88.2205%" y="340" width="1.5748%" height="15" fill="rgb(221,10,30)"/><text x="88.4705%" y="350.50"></text></g><g><title>0x7fbc79c22c1d (libc-2.27.so) (82 samples, 1.29%)</title><rect x="89.7953%" y="340" width="1.2913%" height="15" fill="rgb(210,229,1)"/><text x="90.0453%" y="350.50"></text></g><g><title>0x7fbc79b4f78b (libc-2.27.so) (64 samples, 1.01%)</title><rect x="91.5748%" y="468" width="1.0079%" height="15" fill="rgb(222,148,37)"/><text x="91.8248%" y="478.50"></text></g><g><title>arrow::BufferBuilder::Append (libarctern.so) (468 samples, 7.37%)</title><rect x="86.0630%" y="324" width="7.3701%" height="15" fill="rgb(234,67,33)"/><text x="86.3130%" y="334.50">arrow::Buf..</text></g><g><title>arrow::BufferBuilder::Resize (libarctern.so) (142 samples, 2.24%)</title><rect x="91.1969%" y="340" width="2.2362%" height="15" fill="rgb(247,98,35)"/><text x="91.4469%" y="350.50">a..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (141 samples, 2.22%)</title><rect x="91.2126%" y="356" width="2.2205%" height="15" fill="rgb(247,138,52)"/><text x="91.4626%" y="366.50">a..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (141 samples, 2.22%)</title><rect x="91.2126%" y="372" width="2.2205%" height="15" fill="rgb(213,79,30)"/><text x="91.4626%" y="382.50">a..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (141 samples, 2.22%)</title><rect x="91.2126%" y="388" width="2.2205%" height="15" fill="rgb(246,177,23)"/><text x="91.4626%" y="398.50">j..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (141 samples, 2.22%)</title><rect x="91.2126%" y="404" width="2.2205%" height="15" fill="rgb(230,62,27)"/><text x="91.4626%" y="414.50">i..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (141 samples, 2.22%)</title><rect x="91.2126%" y="420" width="2.2205%" height="15" fill="rgb(216,154,8)"/><text x="91.4626%" y="430.50">j..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (141 samples, 2.22%)</title><rect x="91.2126%" y="436" width="2.2205%" height="15" fill="rgb(244,35,45)"/><text x="91.4626%" y="446.50">j..</text></g><g><title>memcpy (string3.h:52) (141 samples, 2.22%)</title><rect x="91.2126%" y="452" width="2.2205%" height="15" fill="rgb(251,115,12)"/><text x="91.4626%" y="462.50">m..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarctern.so) (674 samples, 10.61%)</title><rect x="83.4803%" y="308" width="10.6142%" height="15" fill="rgb(240,54,50)"/><text x="83.7303%" y="318.50">arrow::BaseBina..</text></g><g><title>ST_Envelope (arctern/_wrapper_func.py:1040) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="116" width="82.7244%" height="15" fill="rgb(233,84,52)"/><text x="12.4075%" y="126.50">ST_Envelope (arctern/_wrapper_func.py:1040)</text></g><g><title>ST_Envelope (arctern_core_.pyx:147) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="132" width="82.7244%" height="15" fill="rgb(207,117,47)"/><text x="12.4075%" y="142.50">ST_Envelope (arctern_core_.pyx:147)</text></g><g><title>ST_Envelope (arctern_core_.pyx:148) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="148" width="82.7244%" height="15" fill="rgb(249,43,39)"/><text x="12.4075%" y="158.50">ST_Envelope (arctern_core_.pyx:148)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="164" width="82.7244%" height="15" fill="rgb(209,38,44)"/><text x="12.4075%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="180" width="82.7244%" height="15" fill="rgb(236,212,23)"/><text x="12.4075%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="196" width="82.7244%" height="15" fill="rgb(242,79,21)"/><text x="12.4075%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="212" width="82.7244%" height="15" fill="rgb(211,96,35)"/><text x="12.4075%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Envelope (libarctern.so) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="228" width="82.7244%" height="15" fill="rgb(253,215,40)"/><text x="12.4075%" y="238.50">arctern::gis::ST_Envelope (libarctern.so)</text></g><g><title>arctern::gis::gdal::ST_Envelope (libarctern.so) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="244" width="82.7244%" height="15" fill="rgb(211,81,21)"/><text x="12.4075%" y="254.50">arctern::gis::gdal::ST_Envelope (libarctern.so)</text></g><g><title>arctern::gis::gdal::UnaryOp&lt;arrow::BinaryBuilder&gt; (libarctern.so) (5,253 samples, 82.72%)</title><rect x="12.1575%" y="260" width="82.7244%" height="15" fill="rgb(208,190,38)"/><text x="12.4075%" y="270.50">arctern::gis::gdal::UnaryOp&lt;arrow::BinaryBuilder&gt; (libarctern.so)</text></g><g><title>std::_Function_handler&lt;void (arrow::BinaryBuilder&amp;, OGRGeometry*), arctern::gis::gdal::ST_Envelope(std::shared_ptr&lt;arrow::Array&gt; const&amp;)::{lambda(arrow::BinaryBuilder&amp;, OGRGeometry*)#1}&gt;::_M_invoke (libarctern.so) (4,022 samples, 63.34%)</title><rect x="31.5433%" y="276" width="63.3386%" height="15" fill="rgb(235,213,38)"/><text x="31.7933%" y="286.50">std::_Function_handler&lt;void (arrow::BinaryBuilder&amp;, OGRGeometry*), arctern::gis::gdal::ST_Envelope(std::s..</text></g><g><title>arctern::gis::gdal::AppendWkbNDR (libarctern.so) (1,036 samples, 16.31%)</title><rect x="78.5669%" y="292" width="16.3150%" height="15" fill="rgb(237,122,38)"/><text x="78.8169%" y="302.50">arctern::gis::gdal::Appen..</text></g><g><title>arrow::py::ConvertArrayToPandas (libarrow_python.so.16.0.0) (214 samples, 3.37%)</title><rect x="94.8819%" y="180" width="3.3701%" height="15" fill="rgb(244,218,35)"/><text x="95.1319%" y="190.50">arr..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (libarrow_python.so.16.0.0) (214 samples, 3.37%)</title><rect x="94.8819%" y="196" width="3.3701%" height="15" fill="rgb(240,68,47)"/><text x="95.1319%" y="206.50">arr..</text></g><g><title>arrow::py::TypedPandasWriter&lt;17&gt;::TransferSingle (libarrow_python.so.16.0.0) (214 samples, 3.37%)</title><rect x="94.8819%" y="212" width="3.3701%" height="15" fill="rgb(210,16,53)"/><text x="95.1319%" y="222.50">arr..</text></g><g><title>arrow::VisitTypeInline&lt;arrow::py::ObjectWriterVisitor&gt; (libarrow_python.so.16.0.0) (214 samples, 3.37%)</title><rect x="94.8819%" y="228" width="3.3701%" height="15" fill="rgb(235,124,12)"/><text x="95.1319%" y="238.50">arr..</text></g><g><title>_ZN5arrow2py18ConvertAsPyObjectsINS_10BinaryTypeERZNS0_19ObjectWriterVisitor5VisitIS2_EENSt9enable_ifIXoosrSt10is_base_ofINS_14BaseBinaryTypeET_E5valuesrS6_INS_19FixedSizeBinaryTypeES8_E5valueENS_6StatusEE4typeERKS8_EUlRKN6nonstd7sv_lite17basic_string_viewIcSt11char_traitsIcEEEPP7_objectE_EESC_RKNS0_13PandasOptionsERKNS_12ChunkedArrayEOT0_SR_ (libarrow_python.so.16.0.0) (214 samples, 3.37%)</title><rect x="94.8819%" y="244" width="3.3701%" height="15" fill="rgb(224,169,11)"/><text x="95.1319%" y="254.50">_ZN..</text></g><g><title>arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert&lt;arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert(nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;)::{lambda(int)#1}, arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert(nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;)::{lambda(int)#2}&gt; (libarrow_python.so.16.0.0) (163 samples, 2.57%)</title><rect x="95.6850%" y="260" width="2.5669%" height="15" fill="rgb(250,166,2)"/><text x="95.9350%" y="270.50">ar..</text></g><g><title>&lt;module&gt; (profile_geo.py:164) (6,281 samples, 98.91%)</title><rect x="0.9764%" y="52" width="98.9134%" height="15" fill="rgb(242,216,29)"/><text x="1.2264%" y="62.50">&lt;module&gt; (profile_geo.py:164)</text></g><g><title>wrapper (profile_geo.py:30) (6,281 samples, 98.91%)</title><rect x="0.9764%" y="68" width="98.9134%" height="15" fill="rgb(230,116,27)"/><text x="1.2264%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Envelope (profile_geo.py:112) (6,269 samples, 98.72%)</title><rect x="1.1654%" y="84" width="98.7244%" height="15" fill="rgb(228,99,48)"/><text x="1.4154%" y="94.50">test_ST_Envelope (profile_geo.py:112)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (6,268 samples, 98.71%)</title><rect x="1.1811%" y="100" width="98.7087%" height="15" fill="rgb(253,11,6)"/><text x="1.4311%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>ST_Envelope (arctern/_wrapper_func.py:1041) (318 samples, 5.01%)</title><rect x="94.8819%" y="116" width="5.0079%" height="15" fill="rgb(247,143,39)"/><text x="95.1319%" y="126.50">ST_Env..</text></g><g><title>to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (318 samples, 5.01%)</title><rect x="94.8819%" y="132" width="5.0079%" height="15" fill="rgb(236,97,10)"/><text x="95.1319%" y="142.50">to_pan..</text></g><g><title>_to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (318 samples, 5.01%)</title><rect x="94.8819%" y="148" width="5.0079%" height="15" fill="rgb(233,208,19)"/><text x="95.1319%" y="158.50">_to_pa..</text></g><g><title>lib__array_like_to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (318 samples, 5.01%)</title><rect x="94.8819%" y="164" width="5.0079%" height="15" fill="rgb(216,164,2)"/><text x="95.1319%" y="174.50">lib__a..</text></g><g><title>series (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (104 samples, 1.64%)</title><rect x="98.2520%" y="180" width="1.6378%" height="15" fill="rgb(220,129,5)"/><text x="98.5020%" y="190.50"></text></g><g><title>__init__ (pandas/core/series.py:305) (104 samples, 1.64%)</title><rect x="98.2520%" y="196" width="1.6378%" height="15" fill="rgb(242,17,10)"/><text x="98.5020%" y="206.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:499) (104 samples, 1.64%)</title><rect x="98.2520%" y="212" width="1.6378%" height="15" fill="rgb(242,107,0)"/><text x="98.5020%" y="222.50"></text></g><g><title>infer_dtype (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (104 samples, 1.64%)</title><rect x="98.2520%" y="228" width="1.6378%" height="15" fill="rgb(251,28,31)"/><text x="98.5020%" y="238.50"></text></g><g><title>Validator_validate (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (104 samples, 1.64%)</title><rect x="98.2520%" y="244" width="1.6378%" height="15" fill="rgb(233,223,10)"/><text x="98.5020%" y="254.50"></text></g><g><title>Validator__validate (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (104 samples, 1.64%)</title><rect x="98.2520%" y="260" width="1.6378%" height="15" fill="rgb(215,21,27)"/><text x="98.5020%" y="270.50"></text></g><g><title>array_item (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (80 samples, 1.26%)</title><rect x="98.6299%" y="276" width="1.2598%" height="15" fill="rgb(232,23,21)"/><text x="98.8799%" y="286.50"></text></g><g><title>all (6,350 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(244,5,23)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>