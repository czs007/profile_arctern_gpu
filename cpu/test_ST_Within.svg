<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="534" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="517.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="517.00"> </text><svg id="frames" x="10" width="1180"><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (261 samples, 1.19%)</title><rect x="0.9172%" y="260" width="1.1851%" height="15" fill="rgb(227,0,7)"/><text x="1.1672%" y="270.50"></text></g><g><title>ST_Within (arctern/_wrapper_func.py:730) (361 samples, 1.64%)</title><rect x="0.4768%" y="116" width="1.6392%" height="15" fill="rgb(217,0,24)"/><text x="0.7268%" y="126.50"></text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (361 samples, 1.64%)</title><rect x="0.4768%" y="132" width="1.6392%" height="15" fill="rgb(221,193,54)"/><text x="0.7268%" y="142.50"></text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (361 samples, 1.64%)</title><rect x="0.4768%" y="148" width="1.6392%" height="15" fill="rgb(248,212,6)"/><text x="0.7268%" y="158.50"></text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (361 samples, 1.64%)</title><rect x="0.4768%" y="164" width="1.6392%" height="15" fill="rgb(208,68,35)"/><text x="0.7268%" y="174.50"></text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (361 samples, 1.64%)</title><rect x="0.4768%" y="180" width="1.6392%" height="15" fill="rgb(232,128,0)"/><text x="0.7268%" y="190.50"></text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (361 samples, 1.64%)</title><rect x="0.4768%" y="196" width="1.6392%" height="15" fill="rgb(207,160,47)"/><text x="0.7268%" y="206.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (361 samples, 1.64%)</title><rect x="0.4768%" y="212" width="1.6392%" height="15" fill="rgb(228,23,34)"/><text x="0.7268%" y="222.50"></text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (361 samples, 1.64%)</title><rect x="0.4768%" y="228" width="1.6392%" height="15" fill="rgb(218,30,26)"/><text x="0.7268%" y="238.50"></text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (299 samples, 1.36%)</title><rect x="0.7583%" y="244" width="1.3577%" height="15" fill="rgb(220,122,19)"/><text x="1.0083%" y="254.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (477 samples, 2.17%)</title><rect x="2.6972%" y="276" width="2.1659%" height="15" fill="rgb(250,228,42)"/><text x="2.9472%" y="286.50">a..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (612 samples, 2.78%)</title><rect x="2.4747%" y="260" width="2.7789%" height="15" fill="rgb(240,193,28)"/><text x="2.7247%" y="270.50">ar..</text></g><g><title>ST_Within (arctern/_wrapper_func.py:731) (697 samples, 3.16%)</title><rect x="2.1160%" y="116" width="3.1649%" height="15" fill="rgb(216,20,37)"/><text x="2.3660%" y="126.50">ST_..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (697 samples, 3.16%)</title><rect x="2.1160%" y="132" width="3.1649%" height="15" fill="rgb(206,188,39)"/><text x="2.3660%" y="142.50">arr..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (697 samples, 3.16%)</title><rect x="2.1160%" y="148" width="3.1649%" height="15" fill="rgb(217,207,13)"/><text x="2.3660%" y="158.50">lib..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (697 samples, 3.16%)</title><rect x="2.1160%" y="164" width="3.1649%" height="15" fill="rgb(231,73,38)"/><text x="2.3660%" y="174.50">arr..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (697 samples, 3.16%)</title><rect x="2.1160%" y="180" width="3.1649%" height="15" fill="rgb(225,20,46)"/><text x="2.3660%" y="190.50">arr..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (697 samples, 3.16%)</title><rect x="2.1160%" y="196" width="3.1649%" height="15" fill="rgb(210,31,41)"/><text x="2.3660%" y="206.50">arr..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (697 samples, 3.16%)</title><rect x="2.1160%" y="212" width="3.1649%" height="15" fill="rgb(221,200,47)"/><text x="2.3660%" y="222.50">arr..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (697 samples, 3.16%)</title><rect x="2.1160%" y="228" width="3.1649%" height="15" fill="rgb(226,26,5)"/><text x="2.3660%" y="238.50">arr..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (657 samples, 2.98%)</title><rect x="2.2976%" y="244" width="2.9832%" height="15" fill="rgb(249,33,26)"/><text x="2.5476%" y="254.50">arr..</text></g><g><title>OGRCurveCollection::empty (libgdal.so.26.0.4) (301 samples, 1.37%)</title><rect x="5.9438%" y="308" width="1.3668%" height="15" fill="rgb(235,183,28)"/><text x="6.1938%" y="318.50"></text></g><g><title>OGRCurvePolygon::~OGRCurvePolygon (libgdal.so.26.0.4) (325 samples, 1.48%)</title><rect x="5.8439%" y="292" width="1.4757%" height="15" fill="rgb(221,5,38)"/><text x="6.0939%" y="302.50"></text></g><g><title>OGRPolygon::~OGRPolygon (libgdal.so.26.0.4) (358 samples, 1.63%)</title><rect x="5.7576%" y="276" width="1.6256%" height="15" fill="rgb(247,18,42)"/><text x="6.0076%" y="286.50"></text></g><g><title>OGRGeometryFactory::createGeometry (libgdal.so.26.0.4) (256 samples, 1.16%)</title><rect x="9.8034%" y="324" width="1.1624%" height="15" fill="rgb(241,131,45)"/><text x="10.0534%" y="334.50"></text></g><g><title>OGRPoint::importFromWkb (libgdal.so.26.0.4) (267 samples, 1.21%)</title><rect x="10.9658%" y="324" width="1.2124%" height="15" fill="rgb(249,31,29)"/><text x="11.2158%" y="334.50"></text></g><g><title>OGRGeometry::importPreambleOfCollectionFromWkb (libgdal.so.26.0.4) (415 samples, 1.88%)</title><rect x="12.6595%" y="356" width="1.8844%" height="15" fill="rgb(225,111,53)"/><text x="12.9095%" y="366.50">O..</text></g><g><title>OGRCurveCollection::importPreambleFromWkb (libgdal.so.26.0.4) (710 samples, 3.22%)</title><rect x="12.5460%" y="340" width="3.2239%" height="15" fill="rgb(238,160,17)"/><text x="12.7960%" y="350.50">OGR..</text></g><g><title>VSICallocVerbose (libgdal.so.26.0.4) (270 samples, 1.23%)</title><rect x="14.5439%" y="356" width="1.2260%" height="15" fill="rgb(214,148,48)"/><text x="14.7939%" y="366.50"></text></g><g><title>__libc_calloc (libc-2.27.so) (238 samples, 1.08%)</title><rect x="14.6892%" y="372" width="1.0807%" height="15" fill="rgb(232,36,49)"/><text x="14.9392%" y="382.50"></text></g><g><title>OGRLinearRing::_importFromWkb (libgdal.so.26.0.4) (316 samples, 1.43%)</title><rect x="16.0196%" y="340" width="1.4349%" height="15" fill="rgb(209,103,24)"/><text x="16.2696%" y="350.50"></text></g><g><title>OGRPolygon::importFromWkb (libgdal.so.26.0.4) (1,192 samples, 5.41%)</title><rect x="12.2281%" y="324" width="5.4125%" height="15" fill="rgb(229,88,8)"/><text x="12.4781%" y="334.50">OGRPoly..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkb (libarctern.so) (2,497 samples, 11.34%)</title><rect x="7.3832%" y="276" width="11.3381%" height="15" fill="rgb(213,181,19)"/><text x="7.6332%" y="286.50">arctern::gis::gda..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (2,199 samples, 9.99%)</title><rect x="8.7363%" y="292" width="9.9850%" height="15" fill="rgb(254,191,54)"/><text x="8.9863%" y="302.50">OGRGeometryFac..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (2,168 samples, 9.84%)</title><rect x="8.8771%" y="308" width="9.8443%" height="15" fill="rgb(241,83,37)"/><text x="9.1271%" y="318.50">OGRGeometryFac..</text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (238 samples, 1.08%)</title><rect x="17.6406%" y="324" width="1.0807%" height="15" fill="rgb(233,36,39)"/><text x="17.8906%" y="334.50"></text></g><g><title>geos::geom::CoordinateSequence::getEnvelope (libgeos-3.8.1.so) (262 samples, 1.19%)</title><rect x="22.4856%" y="404" width="1.1897%" height="15" fill="rgb(226,3,54)"/><text x="22.7356%" y="414.50"></text></g><g><title>geos::geom::CoordinateSequence::expandEnvelope (libgeos-3.8.1.so) (237 samples, 1.08%)</title><rect x="22.5991%" y="420" width="1.0761%" height="15" fill="rgb(245,192,40)"/><text x="22.8491%" y="430.50"></text></g><g><title>geos::geom::Geometry::getEnvelopeInternal (libgeos-3.8.1.so) (472 samples, 2.14%)</title><rect x="22.0043%" y="372" width="2.1432%" height="15" fill="rgb(238,167,29)"/><text x="22.2543%" y="382.50">g..</text></g><g><title>geos::geom::LineString::computeEnvelopeInternal (libgeos-3.8.1.so) (434 samples, 1.97%)</title><rect x="22.1768%" y="388" width="1.9707%" height="15" fill="rgb(232,182,51)"/><text x="22.4268%" y="398.50">g..</text></g><g><title>geos::geom::Geometry::getEnvelopeInternal (libgeos-3.8.1.so) (827 samples, 3.76%)</title><rect x="20.6057%" y="340" width="3.7552%" height="15" fill="rgb(231,60,39)"/><text x="20.8557%" y="350.50">geos..</text></g><g><title>geos::geom::Polygon::computeEnvelopeInternal (libgeos-3.8.1.so) (555 samples, 2.52%)</title><rect x="21.8408%" y="356" width="2.5201%" height="15" fill="rgb(208,69,12)"/><text x="22.0908%" y="366.50">ge..</text></g><g><title>geos::geom::CoordinateSequence::getOrdinate (libgeos-3.8.1.so) (264 samples, 1.20%)</title><rect x="26.3633%" y="356" width="1.1987%" height="15" fill="rgb(235,93,37)"/><text x="26.6133%" y="366.50"></text></g><g><title>geos::geom::Polygon::isRectangle (libgeos-3.8.1.so) (739 samples, 3.36%)</title><rect x="24.4245%" y="340" width="3.3556%" height="15" fill="rgb(213,116,39)"/><text x="24.6745%" y="350.50">geo..</text></g><g><title>__dynamic_cast (dyncast.cc:73) (290 samples, 1.32%)</title><rect x="28.4475%" y="372" width="1.3168%" height="15" fill="rgb(222,207,29)"/><text x="28.6975%" y="382.50"></text></g><g><title>geos::operation::predicate::RectangleContains::isContainedInBoundary (libgeos-3.8.1.so) (394 samples, 1.79%)</title><rect x="28.0207%" y="356" width="1.7890%" height="15" fill="rgb(206,96,30)"/><text x="28.2707%" y="366.50">g..</text></g><g><title>geos::geom::Geometry::contains (libgeos-3.8.1.so) (2,277 samples, 10.34%)</title><rect x="19.8747%" y="324" width="10.3392%" height="15" fill="rgb(218,138,4)"/><text x="20.1247%" y="334.50">geos::geom::Geo..</text></g><g><title>geos::operation::predicate::RectangleContains::contains (libgeos-3.8.1.so) (536 samples, 2.43%)</title><rect x="27.7800%" y="340" width="2.4338%" height="15" fill="rgb(250,191,14)"/><text x="28.0300%" y="350.50">ge..</text></g><g><title>GEOSWithin_r (libgeos_c.so.1.13.3) (2,317 samples, 10.52%)</title><rect x="19.7248%" y="308" width="10.5208%" height="15" fill="rgb(239,60,40)"/><text x="19.9748%" y="318.50">GEOSWithin_r (l..</text></g><g><title>cfree (libc-2.27.so) (296 samples, 1.34%)</title><rect x="33.8510%" y="356" width="1.3440%" height="15" fill="rgb(206,27,48)"/><text x="34.1010%" y="366.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (227 samples, 1.03%)</title><rect x="39.7630%" y="420" width="1.0307%" height="15" fill="rgb(225,35,8)"/><text x="40.0130%" y="430.50"></text></g><g><title>geos::io::WKBReader::readPoint (libgeos-3.8.1.so) (796 samples, 3.61%)</title><rect x="37.2747%" y="388" width="3.6144%" height="15" fill="rgb(250,213,24)"/><text x="37.5247%" y="398.50">geos..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.1.so) (536 samples, 2.43%)</title><rect x="38.4553%" y="404" width="2.4338%" height="15" fill="rgb(247,123,22)"/><text x="38.7053%" y="414.50">ge..</text></g><g><title>geos::geom::LinearRing::LinearRing (libgeos-3.8.1.so) (277 samples, 1.26%)</title><rect x="42.7462%" y="436" width="1.2578%" height="15" fill="rgb(231,138,38)"/><text x="42.9962%" y="446.50"></text></g><g><title>geos::geom::GeometryFactory::createLinearRing (libgeos-3.8.1.so) (395 samples, 1.79%)</title><rect x="42.4919%" y="420" width="1.7936%" height="15" fill="rgb(231,145,46)"/><text x="42.7419%" y="430.50">g..</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:662) (256 samples, 1.16%)</title><rect x="51.3282%" y="452" width="1.1624%" height="15" fill="rgb(251,118,11)"/><text x="51.5782%" y="462.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (streambuf.tcc:59) (400 samples, 1.82%)</title><rect x="54.9607%" y="468" width="1.8163%" height="15" fill="rgb(217,147,25)"/><text x="55.2107%" y="478.50">s..</text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::__safe_gbump (streambuf:804) (400 samples, 1.82%)</title><rect x="54.9607%" y="484" width="1.8163%" height="15" fill="rgb(247,81,37)"/><text x="55.2107%" y="494.50">s..</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (1,006 samples, 4.57%)</title><rect x="52.4906%" y="452" width="4.5680%" height="15" fill="rgb(209,12,38)"/><text x="52.7406%" y="462.50">std::..</text></g><g><title>geos::io::WKBReader::readCoordinateSequence (libgeos-3.8.1.so) (2,927 samples, 13.29%)</title><rect x="44.2991%" y="420" width="13.2907%" height="15" fill="rgb(227,1,9)"/><text x="44.5491%" y="430.50">geos::io::WKBReader:..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.1.so) (2,361 samples, 10.72%)</title><rect x="46.8692%" y="436" width="10.7206%" height="15" fill="rgb(248,47,43)"/><text x="47.1192%" y="446.50">geos::io::WKBRea..</text></g><g><title>geos::io::WKBReader::readLinearRing (libgeos-3.8.1.so) (3,526 samples, 16.01%)</title><rect x="42.2150%" y="404" width="16.0105%" height="15" fill="rgb(221,10,30)"/><text x="42.4650%" y="414.50">geos::io::WKBReader::read..</text></g><g><title>geos::io::WKBReader::readPolygon (libgeos-3.8.1.so) (3,995 samples, 18.14%)</title><rect x="40.8891%" y="388" width="18.1401%" height="15" fill="rgb(210,229,1)"/><text x="41.1391%" y="398.50">geos::io::WKBReader::readPol..</text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (440 samples, 2.00%)</title><rect x="59.7603%" y="388" width="1.9979%" height="15" fill="rgb(222,148,37)"/><text x="60.0103%" y="398.50">s..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.1.so) (6,103 samples, 27.71%)</title><rect x="35.1950%" y="356" width="27.7119%" height="15" fill="rgb(234,67,33)"/><text x="35.4450%" y="366.50">geos::io::WKBReader::read (libgeos-3.8.1.so)</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.1.so) (6,076 samples, 27.59%)</title><rect x="35.3176%" y="372" width="27.5893%" height="15" fill="rgb(247,98,35)"/><text x="35.5676%" y="382.50">geos::io::WKBReader::readGeometry (libgeos-3..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; [clone .isra.176] (libgeos_c.so.1.13.3) (280 samples, 1.27%)</title><rect x="62.9796%" y="356" width="1.2714%" height="15" fill="rgb(247,138,52)"/><text x="63.2296%" y="366.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (basic_string.tcc:317) (286 samples, 1.30%)</title><rect x="65.1364%" y="404" width="1.2986%" height="15" fill="rgb(213,79,30)"/><text x="65.3864%" y="414.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (basic_string.h:216) (542 samples, 2.46%)</title><rect x="64.7914%" y="372" width="2.4611%" height="15" fill="rgb(246,177,23)"/><text x="65.0414%" y="382.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (basic_string.h:183) (542 samples, 2.46%)</title><rect x="64.7914%" y="388" width="2.4611%" height="15" fill="rgb(230,62,27)"/><text x="65.0414%" y="398.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (basic_string.tcc:468) (551 samples, 2.50%)</title><rect x="64.7914%" y="356" width="2.5019%" height="15" fill="rgb(216,154,8)"/><text x="65.0414%" y="366.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:132) (296 samples, 1.34%)</title><rect x="67.8382%" y="356" width="1.3440%" height="15" fill="rgb(244,35,45)"/><text x="68.0882%" y="366.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (275 samples, 1.25%)</title><rect x="71.4299%" y="404" width="1.2487%" height="15" fill="rgb(251,115,12)"/><text x="71.6799%" y="414.50"></text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (639 samples, 2.90%)</title><rect x="69.8769%" y="388" width="2.9015%" height="15" fill="rgb(240,54,50)"/><text x="70.1269%" y="398.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (763 samples, 3.46%)</title><rect x="69.3729%" y="372" width="3.4646%" height="15" fill="rgb(233,84,52)"/><text x="69.6229%" y="382.50">std..</text></g><g><title>__dynamic_cast (dyncast.cc:73) (258 samples, 1.17%)</title><rect x="74.3495%" y="404" width="1.1715%" height="15" fill="rgb(207,117,47)"/><text x="74.5995%" y="414.50"></text></g><g><title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:139) (523 samples, 2.37%)</title><rect x="73.3097%" y="388" width="2.3748%" height="15" fill="rgb(249,43,39)"/><text x="73.5597%" y="398.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:160) (634 samples, 2.88%)</title><rect x="72.8375%" y="372" width="2.8788%" height="15" fill="rgb(209,38,44)"/><text x="73.0875%" y="382.50">st..</text></g><g><title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:110) (408 samples, 1.85%)</title><rect x="76.0886%" y="388" width="1.8526%" height="15" fill="rgb(236,212,23)"/><text x="76.3386%" y="398.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:164) (502 samples, 2.28%)</title><rect x="75.7163%" y="372" width="2.2794%" height="15" fill="rgb(242,79,21)"/><text x="75.9663%" y="382.50">s..</text></g><g><title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:139) (299 samples, 1.36%)</title><rect x="78.3272%" y="388" width="1.3577%" height="15" fill="rgb(211,96,35)"/><text x="78.5772%" y="398.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:165) (386 samples, 1.75%)</title><rect x="77.9957%" y="372" width="1.7527%" height="15" fill="rgb(253,215,40)"/><text x="78.2457%" y="382.50"></text></g><g><title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:110) (361 samples, 1.64%)</title><rect x="80.0481%" y="388" width="1.6392%" height="15" fill="rgb(211,81,21)"/><text x="80.2981%" y="398.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:169) (436 samples, 1.98%)</title><rect x="79.7484%" y="372" width="1.9797%" height="15" fill="rgb(208,190,38)"/><text x="79.9984%" y="382.50">s..</text></g><g><title>std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:139) (326 samples, 1.48%)</title><rect x="82.0778%" y="388" width="1.4803%" height="15" fill="rgb(235,213,38)"/><text x="82.3278%" y="398.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:170) (408 samples, 1.85%)</title><rect x="81.7282%" y="372" width="1.8526%" height="15" fill="rgb(237,122,38)"/><text x="81.9782%" y="382.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (3,169 samples, 14.39%)</title><rect x="69.2367%" y="356" width="14.3895%" height="15" fill="rgb(244,218,35)"/><text x="69.4867%" y="366.50">std::basic_ios&lt;char, s..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.3) (11,900 samples, 54.03%)</title><rect x="32.5342%" y="340" width="54.0344%" height="15" fill="rgb(240,68,47)"/><text x="32.7842%" y="350.50">GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.3)</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (12,778 samples, 58.02%)</title><rect x="30.2956%" y="308" width="58.0212%" height="15" fill="rgb(210,16,53)"/><text x="30.5456%" y="318.50">OGRGeometry::exportToGEOS (libgdal.so.26.0.4)</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (12,517 samples, 56.84%)</title><rect x="31.4807%" y="324" width="56.8360%" height="15" fill="rgb(235,124,12)"/><text x="31.7307%" y="334.50">convertToGEOSGeom (libgdal.so.26.0.4)</text></g><g><title>cfree (libc-2.27.so) (280 samples, 1.27%)</title><rect x="88.4303%" y="308" width="1.2714%" height="15" fill="rgb(224,169,11)"/><text x="88.6803%" y="318.50"></text></g><g><title>geos::geom::Polygon::~Polygon (libgeos-3.8.1.so) (372 samples, 1.69%)</title><rect x="90.5326%" y="308" width="1.6891%" height="15" fill="rgb(250,166,2)"/><text x="90.7826%" y="318.50"></text></g><g><title>0x7fa6e7cc4f54 (libc-2.27.so) (346 samples, 1.57%)</title><rect x="92.8030%" y="340" width="1.5711%" height="15" fill="rgb(242,216,29)"/><text x="93.0530%" y="350.50"></text></g><g><title>0x7fa6e7bc6933 (libc-2.27.so) (411 samples, 1.87%)</title><rect x="96.1359%" y="388" width="1.8662%" height="15" fill="rgb(230,116,27)"/><text x="96.3859%" y="398.50">0..</text></g><g><title>0x7fa6e7bca7d8 (libc-2.27.so) (449 samples, 2.04%)</title><rect x="96.0541%" y="372" width="2.0388%" height="15" fill="rgb(228,99,48)"/><text x="96.3041%" y="382.50">0..</text></g><g><title>operator new (new_op.cc:50) (846 samples, 3.84%)</title><rect x="95.0143%" y="340" width="3.8414%" height="15" fill="rgb(253,11,6)"/><text x="95.2643%" y="350.50">oper..</text></g><g><title>__libc_malloc (libc-2.27.so) (845 samples, 3.84%)</title><rect x="95.0188%" y="356" width="3.8369%" height="15" fill="rgb(247,143,39)"/><text x="95.2688%" y="366.50">__li..</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.3) (1,462 samples, 6.64%)</title><rect x="92.2218%" y="308" width="6.6385%" height="15" fill="rgb(236,97,10)"/><text x="92.4718%" y="318.50">initGEOS_..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.3) (1,431 samples, 6.50%)</title><rect x="92.3625%" y="324" width="6.4978%" height="15" fill="rgb(233,208,19)"/><text x="92.6125%" y="334.50">GEOS_init..</text></g><g><title>OGRGEOSBooleanPredicate (libgdal.so.26.0.4) (17,539 samples, 79.64%)</title><rect x="19.3253%" y="292" width="79.6395%" height="15" fill="rgb(216,164,2)"/><text x="19.5753%" y="302.50">OGRGEOSBooleanPredicate (libgdal.so.26.0.4)</text></g><g><title>ST_Within (arctern/_wrapper_func.py:732) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="116" width="94.6283%" height="15" fill="rgb(220,129,5)"/><text x="5.5308%" y="126.50">ST_Within (arctern/_wrapper_func.py:732)</text></g><g><title>ST_Within (arctern_core_.pyx:114) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="132" width="94.6283%" height="15" fill="rgb(242,17,10)"/><text x="5.5308%" y="142.50">ST_Within (arctern_core_.pyx:114)</text></g><g><title>ST_Within (arctern_core_.pyx:115) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="148" width="94.6283%" height="15" fill="rgb(242,107,0)"/><text x="5.5308%" y="158.50">ST_Within (arctern_core_.pyx:115)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="164" width="94.6283%" height="15" fill="rgb(251,28,31)"/><text x="5.5308%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="180" width="94.6283%" height="15" fill="rgb(233,223,10)"/><text x="5.5308%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="196" width="94.6283%" height="15" fill="rgb(215,21,27)"/><text x="5.5308%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="212" width="94.6283%" height="15" fill="rgb(232,23,21)"/><text x="5.5308%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Within (libarctern.so) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="228" width="94.6283%" height="15" fill="rgb(244,5,23)"/><text x="5.5308%" y="238.50">arctern::gis::ST_Within (libarctern.so)</text></g><g><title>arctern::gis::gdal::ST_Within (libarctern.so) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="244" width="94.6283%" height="15" fill="rgb(226,81,46)"/><text x="5.5308%" y="254.50">arctern::gis::gdal::ST_Within (libarctern.so)</text></g><g><title>arctern::gis::gdal::BinaryOp&lt;arrow::BooleanBuilder&gt; (libarctern.so) (20,840 samples, 94.63%)</title><rect x="5.2808%" y="260" width="94.6283%" height="15" fill="rgb(247,70,30)"/><text x="5.5308%" y="270.50">arctern::gis::gdal::BinaryOp&lt;arrow::BooleanBuilder&gt; (libarctern.so)</text></g><g><title>std::_Function_handler&lt;void (arrow::BooleanBuilder&amp;, OGRGeometry*, OGRGeometry*), arctern::gis::gdal::ST_Within(std::shared_ptr&lt;arrow::Array&gt; const&amp;, std::shared_ptr&lt;arrow::Array&gt; const&amp;)::{lambda(arrow::BooleanBuilder&amp;, OGRGeometry*, OGRGeometry*)#1}&gt;::_M_invoke (libarctern.so) (17,794 samples, 80.80%)</title><rect x="19.1118%" y="276" width="80.7973%" height="15" fill="rgb(212,68,19)"/><text x="19.3618%" y="286.50">std::_Function_handler&lt;void (arrow::BooleanBuilder&amp;, OGRGeometry*, OGRGeometry*), arctern::gis::gdal::ST_Within(std::shared_ptr&lt;arrow:..</text></g><g><title>&lt;module&gt; (profile_geo.py:164) (21,909 samples, 99.48%)</title><rect x="0.4768%" y="52" width="99.4824%" height="15" fill="rgb(240,187,13)"/><text x="0.7268%" y="62.50">&lt;module&gt; (profile_geo.py:164)</text></g><g><title>wrapper (profile_geo.py:30) (21,909 samples, 99.48%)</title><rect x="0.4768%" y="68" width="99.4824%" height="15" fill="rgb(223,113,26)"/><text x="0.7268%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Within (profile_geo.py:96) (21,909 samples, 99.48%)</title><rect x="0.4768%" y="84" width="99.4824%" height="15" fill="rgb(206,192,2)"/><text x="0.7268%" y="94.50">test_ST_Within (profile_geo.py:96)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (21,909 samples, 99.48%)</title><rect x="0.4768%" y="100" width="99.4824%" height="15" fill="rgb(241,108,4)"/><text x="0.7268%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>all (22,023 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>