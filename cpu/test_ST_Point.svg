<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="469.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="469.00"> </text><svg id="frames" x="10" width="1180"><g><title>PyArray_GetArrayParamsFromObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (29 samples, 1.50%)</title><rect x="0.7784%" y="180" width="1.5049%" height="15" fill="rgb(227,0,7)"/><text x="1.0284%" y="190.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (29 samples, 1.50%)</title><rect x="0.7784%" y="196" width="1.5049%" height="15" fill="rgb(217,0,24)"/><text x="1.0284%" y="206.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (20 samples, 1.04%)</title><rect x="1.2455%" y="212" width="1.0379%" height="15" fill="rgb(221,193,54)"/><text x="1.4955%" y="222.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (42 samples, 2.18%)</title><rect x="0.6227%" y="116" width="2.1796%" height="15" fill="rgb(248,212,6)"/><text x="0.8727%" y="126.50">m..</text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1479) (39 samples, 2.02%)</title><rect x="0.7784%" y="132" width="2.0239%" height="15" fill="rgb(208,68,35)"/><text x="1.0284%" y="142.50">c..</text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (39 samples, 2.02%)</title><rect x="0.7784%" y="148" width="2.0239%" height="15" fill="rgb(232,128,0)"/><text x="1.0284%" y="158.50">a..</text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (39 samples, 2.02%)</title><rect x="0.7784%" y="164" width="2.0239%" height="15" fill="rgb(207,160,47)"/><text x="1.0284%" y="174.50">P..</text></g><g><title>__Pyx_PyComplex_As___pyx_t_double_complex (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (22 samples, 1.14%)</title><rect x="5.7084%" y="164" width="1.1417%" height="15" fill="rgb(228,23,34)"/><text x="5.9584%" y="174.50"></text></g><g><title>gen_st_point_data (profile_geo.py:77) (126 samples, 6.54%)</title><rect x="0.6227%" y="68" width="6.5387%" height="15" fill="rgb(218,30,26)"/><text x="0.8727%" y="78.50">gen_st_po..</text></g><g><title>__init__ (pandas/core/series.py:305) (126 samples, 6.54%)</title><rect x="0.6227%" y="84" width="6.5387%" height="15" fill="rgb(220,122,19)"/><text x="0.8727%" y="94.50">__init__ ..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (126 samples, 6.54%)</title><rect x="0.6227%" y="100" width="6.5387%" height="15" fill="rgb(250,228,42)"/><text x="0.8727%" y="110.50">sanitize_..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:78) (84 samples, 4.36%)</title><rect x="2.8023%" y="116" width="4.3591%" height="15" fill="rgb(240,193,28)"/><text x="3.0523%" y="126.50">maybe..</text></g><g><title>maybe_convert_objects (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (81 samples, 4.20%)</title><rect x="2.9580%" y="132" width="4.2034%" height="15" fill="rgb(216,20,37)"/><text x="3.2080%" y="142.50">maybe..</text></g><g><title>maybe_convert_objects.isra.85 (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (81 samples, 4.20%)</title><rect x="2.9580%" y="148" width="4.2034%" height="15" fill="rgb(206,188,39)"/><text x="3.2080%" y="158.50">maybe..</text></g><g><title>PyArray_GetArrayParamsFromObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (32 samples, 1.66%)</title><rect x="7.8360%" y="180" width="1.6606%" height="15" fill="rgb(217,207,13)"/><text x="8.0860%" y="190.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (32 samples, 1.66%)</title><rect x="7.8360%" y="196" width="1.6606%" height="15" fill="rgb(231,73,38)"/><text x="8.0860%" y="206.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (26 samples, 1.35%)</title><rect x="8.1474%" y="212" width="1.3492%" height="15" fill="rgb(225,20,46)"/><text x="8.3974%" y="222.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (44 samples, 2.28%)</title><rect x="7.5765%" y="116" width="2.2833%" height="15" fill="rgb(210,31,41)"/><text x="7.8265%" y="126.50">m..</text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1479) (39 samples, 2.02%)</title><rect x="7.8360%" y="132" width="2.0239%" height="15" fill="rgb(221,200,47)"/><text x="8.0860%" y="142.50">c..</text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (39 samples, 2.02%)</title><rect x="7.8360%" y="148" width="2.0239%" height="15" fill="rgb(226,26,5)"/><text x="8.0860%" y="158.50">a..</text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (39 samples, 2.02%)</title><rect x="7.8360%" y="164" width="2.0239%" height="15" fill="rgb(249,33,26)"/><text x="8.0860%" y="174.50">P..</text></g><g><title>__Pyx_PyComplex_As___pyx_t_double_complex (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (29 samples, 1.50%)</title><rect x="13.3887%" y="164" width="1.5049%" height="15" fill="rgb(235,183,28)"/><text x="13.6387%" y="174.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:158) (282 samples, 14.63%)</title><rect x="0.4670%" y="52" width="14.6341%" height="15" fill="rgb(221,5,38)"/><text x="0.7170%" y="62.50">&lt;module&gt; (profile_geo...</text></g><g><title>gen_st_point_data (profile_geo.py:79) (148 samples, 7.68%)</title><rect x="7.4209%" y="68" width="7.6803%" height="15" fill="rgb(247,18,42)"/><text x="7.6709%" y="78.50">gen_st_poin..</text></g><g><title>__init__ (pandas/core/series.py:305) (145 samples, 7.52%)</title><rect x="7.5765%" y="84" width="7.5246%" height="15" fill="rgb(241,131,45)"/><text x="7.8265%" y="94.50">__init__ (..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (145 samples, 7.52%)</title><rect x="7.5765%" y="100" width="7.5246%" height="15" fill="rgb(249,31,29)"/><text x="7.8265%" y="110.50">sanitize_a..</text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:78) (101 samples, 5.24%)</title><rect x="9.8599%" y="116" width="5.2413%" height="15" fill="rgb(225,111,53)"/><text x="10.1099%" y="126.50">maybe_..</text></g><g><title>maybe_convert_objects (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (99 samples, 5.14%)</title><rect x="9.9637%" y="132" width="5.1375%" height="15" fill="rgb(238,160,17)"/><text x="10.2137%" y="142.50">maybe_..</text></g><g><title>maybe_convert_objects.isra.85 (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (99 samples, 5.14%)</title><rect x="9.9637%" y="148" width="5.1375%" height="15" fill="rgb(214,148,48)"/><text x="10.2137%" y="158.50">maybe_..</text></g><g><title>PyArray_XDECREF (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (30 samples, 1.56%)</title><rect x="15.5682%" y="116" width="1.5568%" height="15" fill="rgb(232,36,49)"/><text x="15.8182%" y="126.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (34 samples, 1.76%)</title><rect x="15.5682%" y="84" width="1.7644%" height="15" fill="rgb(209,103,24)"/><text x="15.8182%" y="94.50"></text></g><g><title>array_dealloc (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (34 samples, 1.76%)</title><rect x="15.5682%" y="100" width="1.7644%" height="15" fill="rgb(229,88,8)"/><text x="15.8182%" y="110.50"></text></g><g><title>ST_Point (arctern/_wrapper_func.py:129) (54 samples, 2.80%)</title><rect x="17.3326%" y="116" width="2.8023%" height="15" fill="rgb(213,181,19)"/><text x="17.5826%" y="126.50">ST..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (54 samples, 2.80%)</title><rect x="17.3326%" y="132" width="2.8023%" height="15" fill="rgb(254,191,54)"/><text x="17.5826%" y="142.50">ar..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (54 samples, 2.80%)</title><rect x="17.3326%" y="148" width="2.8023%" height="15" fill="rgb(241,83,37)"/><text x="17.5826%" y="158.50">li..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (54 samples, 2.80%)</title><rect x="17.3326%" y="164" width="2.8023%" height="15" fill="rgb(233,36,39)"/><text x="17.5826%" y="174.50">ar..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (54 samples, 2.80%)</title><rect x="17.3326%" y="180" width="2.8023%" height="15" fill="rgb(226,3,54)"/><text x="17.5826%" y="190.50">ar..</text></g><g><title>arrow::VisitTypeInline&lt;arrow::py::NumPyConverter&gt; (libarrow_python.so.16.0.0) (54 samples, 2.80%)</title><rect x="17.3326%" y="196" width="2.8023%" height="15" fill="rgb(245,192,40)"/><text x="17.5826%" y="206.50">ar..</text></g><g><title>arrow::py::NumPyConverter::VisitNative&lt;arrow::DoubleType&gt; (libarrow_python.so.16.0.0) (54 samples, 2.80%)</title><rect x="17.3326%" y="212" width="2.8023%" height="15" fill="rgb(238,167,29)"/><text x="17.5826%" y="222.50">ar..</text></g><g><title>arrow::py::(anonymous namespace)::NumPyNullsConverter::Convert (libarrow_python.so.16.0.0) (54 samples, 2.80%)</title><rect x="17.3326%" y="228" width="2.8023%" height="15" fill="rgb(232,182,51)"/><text x="17.5826%" y="238.50">ar..</text></g><g><title>ST_Point (arctern/_wrapper_func.py:130) (57 samples, 2.96%)</title><rect x="20.1349%" y="116" width="2.9580%" height="15" fill="rgb(231,60,39)"/><text x="20.3849%" y="126.50">ST_..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (57 samples, 2.96%)</title><rect x="20.1349%" y="132" width="2.9580%" height="15" fill="rgb(208,69,12)"/><text x="20.3849%" y="142.50">arr..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (57 samples, 2.96%)</title><rect x="20.1349%" y="148" width="2.9580%" height="15" fill="rgb(235,93,37)"/><text x="20.3849%" y="158.50">lib..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (57 samples, 2.96%)</title><rect x="20.1349%" y="164" width="2.9580%" height="15" fill="rgb(213,116,39)"/><text x="20.3849%" y="174.50">arr..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (57 samples, 2.96%)</title><rect x="20.1349%" y="180" width="2.9580%" height="15" fill="rgb(222,207,29)"/><text x="20.3849%" y="190.50">arr..</text></g><g><title>arrow::VisitTypeInline&lt;arrow::py::NumPyConverter&gt; (libarrow_python.so.16.0.0) (57 samples, 2.96%)</title><rect x="20.1349%" y="196" width="2.9580%" height="15" fill="rgb(206,96,30)"/><text x="20.3849%" y="206.50">arr..</text></g><g><title>arrow::py::NumPyConverter::VisitNative&lt;arrow::DoubleType&gt; (libarrow_python.so.16.0.0) (57 samples, 2.96%)</title><rect x="20.1349%" y="212" width="2.9580%" height="15" fill="rgb(218,138,4)"/><text x="20.3849%" y="222.50">arr..</text></g><g><title>arrow::py::(anonymous namespace)::NumPyNullsConverter::Convert (libarrow_python.so.16.0.0) (57 samples, 2.96%)</title><rect x="20.1349%" y="228" width="2.9580%" height="15" fill="rgb(250,191,14)"/><text x="20.3849%" y="238.50">arr..</text></g><g><title>CPLMalloc (libgdal.so.26.0.4) (94 samples, 4.88%)</title><rect x="29.7353%" y="276" width="4.8780%" height="15" fill="rgb(239,60,40)"/><text x="29.9853%" y="286.50">CPLMal..</text></g><g><title>__libc_malloc (libc-2.27.so) (61 samples, 3.17%)</title><rect x="31.4478%" y="292" width="3.1655%" height="15" fill="rgb(206,27,48)"/><text x="31.6978%" y="302.50">__l..</text></g><g><title>OGRPoint::exportToWkb (libgdal.so.26.0.4) (74 samples, 3.84%)</title><rect x="35.3399%" y="276" width="3.8402%" height="15" fill="rgb(225,35,8)"/><text x="35.5899%" y="286.50">OGRP..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::AppendNextOffset (libarctern.so) (58 samples, 3.01%)</title><rect x="46.8085%" y="292" width="3.0099%" height="15" fill="rgb(250,213,24)"/><text x="47.0585%" y="302.50">arr..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Resize (libarctern.so) (28 samples, 1.45%)</title><rect x="49.8184%" y="292" width="1.4530%" height="15" fill="rgb(247,123,22)"/><text x="50.0684%" y="302.50"></text></g><g><title>arrow::BufferBuilder::Resize (libarctern.so) (25 samples, 1.30%)</title><rect x="49.9741%" y="308" width="1.2974%" height="15" fill="rgb(231,138,38)"/><text x="50.2241%" y="318.50"></text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (25 samples, 1.30%)</title><rect x="49.9741%" y="324" width="1.2974%" height="15" fill="rgb(231,145,46)"/><text x="50.2241%" y="334.50"></text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (25 samples, 1.30%)</title><rect x="49.9741%" y="340" width="1.2974%" height="15" fill="rgb(251,118,11)"/><text x="50.2241%" y="350.50"></text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (25 samples, 1.30%)</title><rect x="49.9741%" y="356" width="1.2974%" height="15" fill="rgb(217,147,25)"/><text x="50.2241%" y="366.50"></text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (25 samples, 1.30%)</title><rect x="49.9741%" y="372" width="1.2974%" height="15" fill="rgb(247,81,37)"/><text x="50.2241%" y="382.50"></text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (25 samples, 1.30%)</title><rect x="49.9741%" y="388" width="1.2974%" height="15" fill="rgb(209,12,38)"/><text x="50.2241%" y="398.50"></text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (25 samples, 1.30%)</title><rect x="49.9741%" y="404" width="1.2974%" height="15" fill="rgb(227,1,9)"/><text x="50.2241%" y="414.50"></text></g><g><title>memcpy (string3.h:52) (25 samples, 1.30%)</title><rect x="49.9741%" y="420" width="1.2974%" height="15" fill="rgb(248,47,43)"/><text x="50.2241%" y="430.50"></text></g><g><title>0x7f40a683bb48 (libc-2.27.so) (54 samples, 2.80%)</title><rect x="53.9180%" y="308" width="2.8023%" height="15" fill="rgb(221,10,30)"/><text x="54.1680%" y="318.50">0x..</text></g><g><title>0x7f40a683bb4c (libc-2.27.so) (24 samples, 1.25%)</title><rect x="56.7203%" y="308" width="1.2455%" height="15" fill="rgb(210,229,1)"/><text x="56.9703%" y="318.50"></text></g><g><title>0x7f40a676878b (libc-2.27.so) (43 samples, 2.23%)</title><rect x="59.0036%" y="436" width="2.2314%" height="15" fill="rgb(222,148,37)"/><text x="59.2536%" y="446.50">0..</text></g><g><title>0x7f40a67687e1 (libc-2.27.so) (24 samples, 1.25%)</title><rect x="61.8059%" y="436" width="1.2455%" height="15" fill="rgb(234,67,33)"/><text x="62.0559%" y="446.50"></text></g><g><title>arrow::BufferBuilder::Append (libarctern.so) (231 samples, 11.99%)</title><rect x="51.2714%" y="292" width="11.9875%" height="15" fill="rgb(247,98,35)"/><text x="51.5214%" y="302.50">arrow::BufferBuild..</text></g><g><title>arrow::BufferBuilder::Resize (libarctern.so) (99 samples, 5.14%)</title><rect x="58.1214%" y="308" width="5.1375%" height="15" fill="rgb(247,138,52)"/><text x="58.3714%" y="318.50">arrow:..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (99 samples, 5.14%)</title><rect x="58.1214%" y="324" width="5.1375%" height="15" fill="rgb(213,79,30)"/><text x="58.3714%" y="334.50">arrow:..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (99 samples, 5.14%)</title><rect x="58.1214%" y="340" width="5.1375%" height="15" fill="rgb(246,177,23)"/><text x="58.3714%" y="350.50">arrow:..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (99 samples, 5.14%)</title><rect x="58.1214%" y="356" width="5.1375%" height="15" fill="rgb(230,62,27)"/><text x="58.3714%" y="366.50">je_arr..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (99 samples, 5.14%)</title><rect x="58.1214%" y="372" width="5.1375%" height="15" fill="rgb(216,154,8)"/><text x="58.3714%" y="382.50">irallo..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (99 samples, 5.14%)</title><rect x="58.1214%" y="388" width="5.1375%" height="15" fill="rgb(244,35,45)"/><text x="58.3714%" y="398.50">je_arr..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (99 samples, 5.14%)</title><rect x="58.1214%" y="404" width="5.1375%" height="15" fill="rgb(251,115,12)"/><text x="58.3714%" y="414.50">je_arr..</text></g><g><title>memcpy (string3.h:52) (99 samples, 5.14%)</title><rect x="58.1214%" y="420" width="5.1375%" height="15" fill="rgb(240,54,50)"/><text x="58.3714%" y="430.50">memcpy..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append [clone .constprop.368] (libarctern.so) (551 samples, 28.59%)</title><rect x="39.6471%" y="276" width="28.5937%" height="15" fill="rgb(233,84,52)"/><text x="39.8971%" y="286.50">arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::A..</text></g><g><title>arrow::Status::Status (libarctern.so) (96 samples, 4.98%)</title><rect x="63.2590%" y="292" width="4.9818%" height="15" fill="rgb(207,117,47)"/><text x="63.5090%" y="302.50">arrow:..</text></g><g><title>ST_Point (arctern/_wrapper_func.py:131) (931 samples, 48.31%)</title><rect x="23.0929%" y="116" width="48.3134%" height="15" fill="rgb(249,43,39)"/><text x="23.3429%" y="126.50">ST_Point (arctern/_wrapper_func.py:131)</text></g><g><title>ST_Point (arctern_core_.pyx:57) (931 samples, 48.31%)</title><rect x="23.0929%" y="132" width="48.3134%" height="15" fill="rgb(209,38,44)"/><text x="23.3429%" y="142.50">ST_Point (arctern_core_.pyx:57)</text></g><g><title>ST_Point (arctern_core_.pyx:58) (931 samples, 48.31%)</title><rect x="23.0929%" y="148" width="48.3134%" height="15" fill="rgb(236,212,23)"/><text x="23.3429%" y="158.50">ST_Point (arctern_core_.pyx:58)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (931 samples, 48.31%)</title><rect x="23.0929%" y="164" width="48.3134%" height="15" fill="rgb(242,79,21)"/><text x="23.3429%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (931 samples, 48.31%)</title><rect x="23.0929%" y="180" width="48.3134%" height="15" fill="rgb(211,96,35)"/><text x="23.3429%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_..</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (931 samples, 48.31%)</title><rect x="23.0929%" y="196" width="48.3134%" height="15" fill="rgb(253,215,40)"/><text x="23.3429%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_b..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (931 samples, 48.31%)</title><rect x="23.0929%" y="212" width="48.3134%" height="15" fill="rgb(211,81,21)"/><text x="23.3429%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Point (libarctern.so) (931 samples, 48.31%)</title><rect x="23.0929%" y="228" width="48.3134%" height="15" fill="rgb(208,190,38)"/><text x="23.3429%" y="238.50">arctern::gis::ST_Point (libarctern.so)</text></g><g><title>arctern::gis::gdal::ST_Point (libarctern.so) (931 samples, 48.31%)</title><rect x="23.0929%" y="244" width="48.3134%" height="15" fill="rgb(235,213,38)"/><text x="23.3429%" y="254.50">arctern::gis::gdal::ST_Point (libarctern.so)</text></g><g><title>arctern::gis::gdal::AppendWkbNDR [clone .constprop.364] (libarctern.so) (866 samples, 44.94%)</title><rect x="26.4660%" y="260" width="44.9403%" height="15" fill="rgb(237,122,38)"/><text x="26.7160%" y="270.50">arctern::gis::gdal::AppendWkbNDR [clone .constprop.364] (libarctern.so)</text></g><g><title>cfree (libc-2.27.so) (61 samples, 3.17%)</title><rect x="68.2408%" y="276" width="3.1655%" height="15" fill="rgb(244,218,35)"/><text x="68.4908%" y="286.50">cfr..</text></g><g><title>arrow::py::ConvertArrayToPandas (libarrow_python.so.16.0.0) (329 samples, 17.07%)</title><rect x="71.4063%" y="180" width="17.0732%" height="15" fill="rgb(240,68,47)"/><text x="71.6563%" y="190.50">arrow::py::ConvertArrayToP..</text></g><g><title>arrow::py::ConvertChunkedArrayToPandas (libarrow_python.so.16.0.0) (329 samples, 17.07%)</title><rect x="71.4063%" y="196" width="17.0732%" height="15" fill="rgb(210,16,53)"/><text x="71.6563%" y="206.50">arrow::py::ConvertChunkedA..</text></g><g><title>arrow::py::TypedPandasWriter&lt;17&gt;::TransferSingle (libarrow_python.so.16.0.0) (329 samples, 17.07%)</title><rect x="71.4063%" y="212" width="17.0732%" height="15" fill="rgb(235,124,12)"/><text x="71.6563%" y="222.50">arrow::py::TypedPandasWrit..</text></g><g><title>arrow::VisitTypeInline&lt;arrow::py::ObjectWriterVisitor&gt; (libarrow_python.so.16.0.0) (329 samples, 17.07%)</title><rect x="71.4063%" y="228" width="17.0732%" height="15" fill="rgb(224,169,11)"/><text x="71.6563%" y="238.50">arrow::VisitTypeInline&lt;arr..</text></g><g><title>_ZN5arrow2py18ConvertAsPyObjectsINS_10BinaryTypeERZNS0_19ObjectWriterVisitor5VisitIS2_EENSt9enable_ifIXoosrSt10is_base_ofINS_14BaseBinaryTypeET_E5valuesrS6_INS_19FixedSizeBinaryTypeES8_E5valueENS_6StatusEE4typeERKS8_EUlRKN6nonstd7sv_lite17basic_string_viewIcSt11char_traitsIcEEEPP7_objectE_EESC_RKNS0_13PandasOptionsERKNS_12ChunkedArrayEOT0_SR_ (libarrow_python.so.16.0.0) (329 samples, 17.07%)</title><rect x="71.4063%" y="244" width="17.0732%" height="15" fill="rgb(250,166,2)"/><text x="71.6563%" y="254.50">_ZN5arrow2py18ConvertAsPyO..</text></g><g><title>arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert&lt;arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert(nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;)::{lambda(int)#1}, arrow::internal::ScalarMemoTable&lt;nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt;, arrow::internal::HashTable&gt;::GetOrInsert(nonstd::sv_lite::basic_string_view&lt;char, std::char_traits&lt;char&gt; &gt; const&amp;)::{lambda(int)#2}&gt; (libarrow_python.so.16.0.0) (249 samples, 12.92%)</title><rect x="75.5579%" y="260" width="12.9216%" height="15" fill="rgb(242,216,29)"/><text x="75.8079%" y="270.50">arrow::internal::Sc..</text></g><g><title>0x7f40a6837dd9 (libc-2.27.so) (25 samples, 1.30%)</title><rect x="87.1821%" y="276" width="1.2974%" height="15" fill="rgb(230,116,27)"/><text x="87.4321%" y="286.50"></text></g><g><title>Validator_is_valid (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (28 samples, 1.45%)</title><rect x="89.8287%" y="276" width="1.4530%" height="15" fill="rgb(228,99,48)"/><text x="90.0787%" y="286.50"></text></g><g><title>PyArray_Scalar (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (78 samples, 4.05%)</title><rect x="93.4613%" y="292" width="4.0477%" height="15" fill="rgb(253,11,6)"/><text x="93.7113%" y="302.50">PyAr..</text></g><g><title>OBJECT_getitem (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (42 samples, 2.18%)</title><rect x="95.3295%" y="308" width="2.1796%" height="15" fill="rgb(247,143,39)"/><text x="95.5795%" y="318.50">O..</text></g><g><title>wrapper (profile_geo.py:30) (1,616 samples, 83.86%)</title><rect x="15.4645%" y="68" width="83.8609%" height="15" fill="rgb(236,97,10)"/><text x="15.7145%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Point (profile_geo.py:92) (1,580 samples, 81.99%)</title><rect x="17.3326%" y="84" width="81.9927%" height="15" fill="rgb(233,208,19)"/><text x="17.5826%" y="94.50">test_ST_Point (profile_geo.py:92)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (1,580 samples, 81.99%)</title><rect x="17.3326%" y="100" width="81.9927%" height="15" fill="rgb(216,164,2)"/><text x="17.5826%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>ST_Point (arctern/_wrapper_func.py:132) (538 samples, 27.92%)</title><rect x="71.4063%" y="116" width="27.9190%" height="15" fill="rgb(220,129,5)"/><text x="71.6563%" y="126.50">ST_Point (arctern/_wrapper_func.py:132)</text></g><g><title>to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (538 samples, 27.92%)</title><rect x="71.4063%" y="132" width="27.9190%" height="15" fill="rgb(242,17,10)"/><text x="71.6563%" y="142.50">to_pandas (pyarrow/lib.cpython-38-x86_64-linu..</text></g><g><title>_to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (538 samples, 27.92%)</title><rect x="71.4063%" y="148" width="27.9190%" height="15" fill="rgb(242,107,0)"/><text x="71.6563%" y="158.50">_to_pandas (pyarrow/lib.cpython-38-x86_64-lin..</text></g><g><title>lib__array_like_to_pandas (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (538 samples, 27.92%)</title><rect x="71.4063%" y="164" width="27.9190%" height="15" fill="rgb(251,28,31)"/><text x="71.6563%" y="174.50">lib__array_like_to_pandas (pyarrow/lib.cpytho..</text></g><g><title>series (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (209 samples, 10.85%)</title><rect x="88.4795%" y="180" width="10.8459%" height="15" fill="rgb(233,223,10)"/><text x="88.7295%" y="190.50">series (pyarrow/..</text></g><g><title>__init__ (pandas/core/series.py:305) (209 samples, 10.85%)</title><rect x="88.4795%" y="196" width="10.8459%" height="15" fill="rgb(215,21,27)"/><text x="88.7295%" y="206.50">__init__ (pandas..</text></g><g><title>sanitize_array (pandas/core/construction.py:499) (209 samples, 10.85%)</title><rect x="88.4795%" y="212" width="10.8459%" height="15" fill="rgb(232,23,21)"/><text x="88.7295%" y="222.50">sanitize_array (..</text></g><g><title>infer_dtype (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (209 samples, 10.85%)</title><rect x="88.4795%" y="228" width="10.8459%" height="15" fill="rgb(244,5,23)"/><text x="88.7295%" y="238.50">infer_dtype (pan..</text></g><g><title>Validator_validate (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (209 samples, 10.85%)</title><rect x="88.4795%" y="244" width="10.8459%" height="15" fill="rgb(226,81,46)"/><text x="88.7295%" y="254.50">Validator_valida..</text></g><g><title>Validator__validate (pandas/_libs/lib.cpython-38-x86_64-linux-gnu.so) (209 samples, 10.85%)</title><rect x="88.4795%" y="260" width="10.8459%" height="15" fill="rgb(247,70,30)"/><text x="88.7295%" y="270.50">Validator__valid..</text></g><g><title>array_item (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (155 samples, 8.04%)</title><rect x="91.2818%" y="276" width="8.0436%" height="15" fill="rgb(212,68,19)"/><text x="91.5318%" y="286.50">array_item ..</text></g><g><title>get_item_pointer (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (35 samples, 1.82%)</title><rect x="97.5091%" y="292" width="1.8163%" height="15" fill="rgb(240,187,13)"/><text x="97.7591%" y="302.50">g..</text></g><g><title>&lt;module&gt; (profile_geo.py:164) (1,617 samples, 83.91%)</title><rect x="15.4645%" y="52" width="83.9128%" height="15" fill="rgb(223,113,26)"/><text x="15.7145%" y="62.50">&lt;module&gt; (profile_geo.py:164)</text></g><g><title>all (1,927 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>