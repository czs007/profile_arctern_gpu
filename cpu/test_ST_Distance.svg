<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (180 samples, 1.14%)</title><rect x="1.5061%" y="276" width="1.1391%" height="15" fill="rgb(227,0,7)"/><text x="1.7561%" y="286.50"></text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (330 samples, 2.09%)</title><rect x="1.1834%" y="260" width="2.0883%" height="15" fill="rgb(217,0,24)"/><text x="1.4334%" y="270.50">a..</text></g><g><title>ST_Distance (arctern/_wrapper_func.py:768) (413 samples, 2.61%)</title><rect x="0.6961%" y="116" width="2.6136%" height="15" fill="rgb(221,193,54)"/><text x="0.9461%" y="126.50">ST..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (413 samples, 2.61%)</title><rect x="0.6961%" y="132" width="2.6136%" height="15" fill="rgb(248,212,6)"/><text x="0.9461%" y="142.50">ar..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (413 samples, 2.61%)</title><rect x="0.6961%" y="148" width="2.6136%" height="15" fill="rgb(208,68,35)"/><text x="0.9461%" y="158.50">li..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (413 samples, 2.61%)</title><rect x="0.6961%" y="164" width="2.6136%" height="15" fill="rgb(232,128,0)"/><text x="0.9461%" y="174.50">ar..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (413 samples, 2.61%)</title><rect x="0.6961%" y="180" width="2.6136%" height="15" fill="rgb(207,160,47)"/><text x="0.9461%" y="190.50">ar..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (413 samples, 2.61%)</title><rect x="0.6961%" y="196" width="2.6136%" height="15" fill="rgb(228,23,34)"/><text x="0.9461%" y="206.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (413 samples, 2.61%)</title><rect x="0.6961%" y="212" width="2.6136%" height="15" fill="rgb(218,30,26)"/><text x="0.9461%" y="222.50">ar..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (413 samples, 2.61%)</title><rect x="0.6961%" y="228" width="2.6136%" height="15" fill="rgb(220,122,19)"/><text x="0.9461%" y="238.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (371 samples, 2.35%)</title><rect x="0.9619%" y="244" width="2.3478%" height="15" fill="rgb(250,228,42)"/><text x="1.2119%" y="254.50">a..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (192 samples, 1.22%)</title><rect x="4.1640%" y="276" width="1.2150%" height="15" fill="rgb(240,193,28)"/><text x="4.4140%" y="286.50"></text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (340 samples, 2.15%)</title><rect x="3.8539%" y="260" width="2.1516%" height="15" fill="rgb(216,20,37)"/><text x="4.1039%" y="270.50">a..</text></g><g><title>ST_Distance (arctern/_wrapper_func.py:769) (433 samples, 2.74%)</title><rect x="3.3097%" y="116" width="2.7402%" height="15" fill="rgb(206,188,39)"/><text x="3.5597%" y="126.50">ST..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (433 samples, 2.74%)</title><rect x="3.3097%" y="132" width="2.7402%" height="15" fill="rgb(217,207,13)"/><text x="3.5597%" y="142.50">ar..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (433 samples, 2.74%)</title><rect x="3.3097%" y="148" width="2.7402%" height="15" fill="rgb(231,73,38)"/><text x="3.5597%" y="158.50">li..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (433 samples, 2.74%)</title><rect x="3.3097%" y="164" width="2.7402%" height="15" fill="rgb(225,20,46)"/><text x="3.5597%" y="174.50">ar..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (433 samples, 2.74%)</title><rect x="3.3097%" y="180" width="2.7402%" height="15" fill="rgb(210,31,41)"/><text x="3.5597%" y="190.50">ar..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (433 samples, 2.74%)</title><rect x="3.3097%" y="196" width="2.7402%" height="15" fill="rgb(221,200,47)"/><text x="3.5597%" y="206.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (433 samples, 2.74%)</title><rect x="3.3097%" y="212" width="2.7402%" height="15" fill="rgb(226,26,5)"/><text x="3.5597%" y="222.50">ar..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (433 samples, 2.74%)</title><rect x="3.3097%" y="228" width="2.7402%" height="15" fill="rgb(249,33,26)"/><text x="3.5597%" y="238.50">ar..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (385 samples, 2.44%)</title><rect x="3.6135%" y="244" width="2.4364%" height="15" fill="rgb(235,183,28)"/><text x="3.8635%" y="254.50">ar..</text></g><g><title>OGRGeometryFactory::createGeometry (libgdal.so.26.0.4) (203 samples, 1.28%)</title><rect x="9.0621%" y="324" width="1.2846%" height="15" fill="rgb(221,5,38)"/><text x="9.3121%" y="334.50"></text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (162 samples, 1.03%)</title><rect x="12.0554%" y="356" width="1.0252%" height="15" fill="rgb(247,18,42)"/><text x="12.3054%" y="366.50"></text></g><g><title>OGRPoint::importFromWkb (libgdal.so.26.0.4) (496 samples, 3.14%)</title><rect x="10.3468%" y="324" width="3.1388%" height="15" fill="rgb(241,131,45)"/><text x="10.5968%" y="334.50">OGR..</text></g><g><title>OGRGeometry::importPreambleFromWkb (libgdal.so.26.0.4) (343 samples, 2.17%)</title><rect x="11.3150%" y="340" width="2.1706%" height="15" fill="rgb(249,31,29)"/><text x="11.5650%" y="350.50">O..</text></g><g><title>arctern::gis::gdal::Wrapper_createFromWkb (libarctern.so) (1,335 samples, 8.45%)</title><rect x="6.6257%" y="276" width="8.4483%" height="15" fill="rgb(225,111,53)"/><text x="6.8757%" y="286.50">arctern::gis..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (1,147 samples, 7.26%)</title><rect x="7.8155%" y="292" width="7.2586%" height="15" fill="rgb(238,160,17)"/><text x="8.0655%" y="302.50">OGRGeometr..</text></g><g><title>OGRGeometryFactory::createFromWkb (libgdal.so.26.0.4) (1,113 samples, 7.04%)</title><rect x="8.0306%" y="308" width="7.0434%" height="15" fill="rgb(214,148,48)"/><text x="8.2806%" y="318.50">OGRGeomet..</text></g><g><title>OGRReadWKBGeometryType (libgdal.so.26.0.4) (251 samples, 1.59%)</title><rect x="13.4856%" y="324" width="1.5884%" height="15" fill="rgb(232,36,49)"/><text x="13.7356%" y="334.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (324 samples, 2.05%)</title><rect x="20.3772%" y="436" width="2.0504%" height="15" fill="rgb(209,103,24)"/><text x="20.6272%" y="446.50">_..</text></g><g><title>geos::operation::distance::DistanceOp::computeContainmentDistance (libgeos-3.8.1.so) (597 samples, 3.78%)</title><rect x="18.6875%" y="388" width="3.7780%" height="15" fill="rgb(229,88,8)"/><text x="18.9375%" y="398.50">geos..</text></g><g><title>geos::geom::util::PolygonExtracter::getPolygons (libgeos-3.8.1.so) (548 samples, 3.47%)</title><rect x="18.9976%" y="404" width="3.4679%" height="15" fill="rgb(213,181,19)"/><text x="19.2476%" y="414.50">geo..</text></g><g><title>geos::geom::util::PolygonExtracter::filter_ro (libgeos-3.8.1.so) (469 samples, 2.97%)</title><rect x="19.4975%" y="420" width="2.9680%" height="15" fill="rgb(254,191,54)"/><text x="19.7475%" y="430.50">geo..</text></g><g><title>__cxxabiv1::__si_class_type_info::__do_dyncast (si_class_type_info.cc:63) (178 samples, 1.13%)</title><rect x="25.9587%" y="452" width="1.1264%" height="15" fill="rgb(241,83,37)"/><text x="26.2087%" y="462.50"></text></g><g><title>__dynamic_cast (dyncast.cc:73) (352 samples, 2.23%)</title><rect x="25.0221%" y="436" width="2.2276%" height="15" fill="rgb(233,36,39)"/><text x="25.2721%" y="446.50">_..</text></g><g><title>geos::geom::util::LinearComponentExtracter::getLines (libgeos-3.8.1.so) (525 samples, 3.32%)</title><rect x="23.9906%" y="404" width="3.3224%" height="15" fill="rgb(226,3,54)"/><text x="24.2406%" y="414.50">geo..</text></g><g><title>geos::geom::util::LinearComponentExtracter::filter_rw (libgeos-3.8.1.so) (456 samples, 2.89%)</title><rect x="24.4273%" y="420" width="2.8857%" height="15" fill="rgb(245,192,40)"/><text x="24.6773%" y="430.50">ge..</text></g><g><title>geos::geom::util::PointExtracter::getPoints (libgeos-3.8.1.so) (496 samples, 3.14%)</title><rect x="27.3130%" y="404" width="3.1388%" height="15" fill="rgb(238,167,29)"/><text x="27.5630%" y="414.50">geo..</text></g><g><title>geos::geom::util::PointExtracter::filter_ro (libgeos-3.8.1.so) (409 samples, 2.59%)</title><rect x="27.8636%" y="420" width="2.5883%" height="15" fill="rgb(232,182,51)"/><text x="28.1136%" y="430.50">ge..</text></g><g><title>std::vector&lt;geos::geom::Point const*, std::allocator&lt;geos::geom::Point const*&gt; &gt;::_M_realloc_insert&lt;geos::geom::Point const* const&amp;&gt; (libgeos-3.8.1.so) (204 samples, 1.29%)</title><rect x="29.1609%" y="436" width="1.2910%" height="15" fill="rgb(231,60,39)"/><text x="29.4109%" y="446.50"></text></g><g><title>geos::operation::distance::DistanceOp::computeMinDistancePoints (libgeos-3.8.1.so) (386 samples, 2.44%)</title><rect x="30.7809%" y="404" width="2.4427%" height="15" fill="rgb(208,69,12)"/><text x="31.0309%" y="414.50">ge..</text></g><g><title>geos::operation::distance::DistanceOp::distance (libgeos-3.8.1.so) (2,454 samples, 15.53%)</title><rect x="17.9471%" y="356" width="15.5297%" height="15" fill="rgb(235,93,37)"/><text x="18.1971%" y="366.50">geos::operation::distanc..</text></g><g><title>geos::operation::distance::DistanceOp::computeMinDistance (libgeos-3.8.1.so) (2,393 samples, 15.14%)</title><rect x="18.3331%" y="372" width="15.1437%" height="15" fill="rgb(213,116,39)"/><text x="18.5831%" y="382.50">geos::operation::distan..</text></g><g><title>geos::operation::distance::DistanceOp::computeFacetDistance (libgeos-3.8.1.so) (1,740 samples, 11.01%)</title><rect x="22.4655%" y="388" width="11.0113%" height="15" fill="rgb(222,207,29)"/><text x="22.7155%" y="398.50">geos::operation:..</text></g><g><title>GEOSDistance_r (libgeos_c.so.1.13.3) (2,691 samples, 17.03%)</title><rect x="16.5296%" y="308" width="17.0295%" height="15" fill="rgb(206,96,30)"/><text x="16.7796%" y="318.50">GEOSDistance_r (libgeos_c...</text></g><g><title>geos::geom::Geometry::distance (libgeos-3.8.1.so) (2,627 samples, 16.62%)</title><rect x="16.9346%" y="324" width="16.6245%" height="15" fill="rgb(218,138,4)"/><text x="17.1846%" y="334.50">geos::geom::Geometry::dist..</text></g><g><title>geos::operation::distance::DistanceOp::distance (libgeos-3.8.1.so) (2,616 samples, 16.55%)</title><rect x="17.0042%" y="340" width="16.5549%" height="15" fill="rgb(250,191,14)"/><text x="17.2542%" y="350.50">geos::operation::distance:..</text></g><g><title>CPLMalloc (libgdal.so.26.0.4) (222 samples, 1.40%)</title><rect x="35.5588%" y="340" width="1.4049%" height="15" fill="rgb(239,60,40)"/><text x="35.8088%" y="350.50"></text></g><g><title>cfree (libc-2.27.so) (246 samples, 1.56%)</title><rect x="38.6723%" y="356" width="1.5568%" height="15" fill="rgb(206,27,48)"/><text x="38.9223%" y="366.50"></text></g><g><title>geos::geom::GeometryFactory::createPoint (libgeos-3.8.1.so) (254 samples, 1.61%)</title><rect x="43.3553%" y="404" width="1.6074%" height="15" fill="rgb(225,35,8)"/><text x="43.6053%" y="414.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (streambuf.tcc:59) (184 samples, 1.16%)</title><rect x="50.0063%" y="436" width="1.1644%" height="15" fill="rgb(250,213,24)"/><text x="50.2563%" y="446.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::__safe_gbump (streambuf:804) (184 samples, 1.16%)</title><rect x="50.0063%" y="452" width="1.1644%" height="15" fill="rgb(247,123,22)"/><text x="50.2563%" y="462.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (450 samples, 2.85%)</title><rect x="48.4369%" y="420" width="2.8477%" height="15" fill="rgb(231,138,38)"/><text x="48.6869%" y="430.50">st..</text></g><g><title>geos::io::WKBReader::readPoint (libgeos-3.8.1.so) (1,432 samples, 9.06%)</title><rect x="42.5959%" y="388" width="9.0621%" height="15" fill="rgb(231,145,46)"/><text x="42.8459%" y="398.50">geos::io::WKB..</text></g><g><title>geos::io::WKBReader::readCoordinate (libgeos-3.8.1.so) (1,058 samples, 6.70%)</title><rect x="44.9627%" y="404" width="6.6954%" height="15" fill="rgb(251,118,11)"/><text x="45.2127%" y="414.50">geos::io:..</text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsgetn (streambuf.tcc:59) (165 samples, 1.04%)</title><rect x="54.0818%" y="404" width="1.0442%" height="15" fill="rgb(217,147,25)"/><text x="54.3318%" y="414.50"></text></g><g><title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::__safe_gbump (streambuf:804) (165 samples, 1.04%)</title><rect x="54.0818%" y="420" width="1.0442%" height="15" fill="rgb(247,81,37)"/><text x="54.3318%" y="430.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;::read (istream.tcc:667) (410 samples, 2.59%)</title><rect x="52.6642%" y="388" width="2.5946%" height="15" fill="rgb(209,12,38)"/><text x="52.9142%" y="398.50">st..</text></g><g><title>geos::io::WKBReader::read (libgeos-3.8.1.so) (2,583 samples, 16.35%)</title><rect x="40.2291%" y="356" width="16.3460%" height="15" fill="rgb(227,1,9)"/><text x="40.4791%" y="366.50">geos::io::WKBReader::read..</text></g><g><title>geos::io::WKBReader::readGeometry (libgeos-3.8.1.so) (2,552 samples, 16.15%)</title><rect x="40.4253%" y="372" width="16.1499%" height="15" fill="rgb(248,47,43)"/><text x="40.6753%" y="382.50">geos::io::WKBReader::read..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append (libgdal.so.26.0.4) (166 samples, 1.05%)</title><rect x="55.5246%" y="388" width="1.0505%" height="15" fill="rgb(221,10,30)"/><text x="55.7746%" y="398.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt; [clone .isra.176] (libgeos_c.so.1.13.3) (215 samples, 1.36%)</title><rect x="56.6637%" y="356" width="1.3606%" height="15" fill="rgb(210,229,1)"/><text x="56.9137%" y="366.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_mutate (basic_string.tcc:317) (175 samples, 1.11%)</title><rect x="58.8786%" y="404" width="1.1075%" height="15" fill="rgb(222,148,37)"/><text x="59.1286%" y="414.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (basic_string.h:216) (415 samples, 2.63%)</title><rect x="58.4863%" y="372" width="2.6262%" height="15" fill="rgb(234,67,33)"/><text x="58.7363%" y="382.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_length (basic_string.h:183) (415 samples, 2.63%)</title><rect x="58.4863%" y="388" width="2.6262%" height="15" fill="rgb(247,98,35)"/><text x="58.7363%" y="398.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (basic_string.tcc:468) (432 samples, 2.73%)</title><rect x="58.4863%" y="356" width="2.7338%" height="15" fill="rgb(247,138,52)"/><text x="58.7363%" y="366.50">st..</text></g><g><title>std::ios_base::_M_init (ios_locale.cc:44) (224 samples, 1.42%)</title><rect x="62.0238%" y="372" width="1.4175%" height="15" fill="rgb(213,79,30)"/><text x="62.2738%" y="382.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:132) (310 samples, 1.96%)</title><rect x="61.8086%" y="356" width="1.9618%" height="15" fill="rgb(246,177,23)"/><text x="62.0586%" y="366.50">s..</text></g><g><title>__dynamic_cast (dyncast.cc:73) (267 samples, 1.69%)</title><rect x="67.0991%" y="404" width="1.6897%" height="15" fill="rgb(230,62,27)"/><text x="67.3491%" y="414.50"></text></g><g><title>std::has_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:110) (657 samples, 4.16%)</title><rect x="64.8336%" y="388" width="4.1577%" height="15" fill="rgb(216,154,8)"/><text x="65.0836%" y="398.50">std::..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:159) (788 samples, 4.99%)</title><rect x="64.0805%" y="372" width="4.9867%" height="15" fill="rgb(244,35,45)"/><text x="64.3305%" y="382.50">std::b..</text></g><g><title>__dynamic_cast (dyncast.cc:73) (263 samples, 1.66%)</title><rect x="70.7695%" y="404" width="1.6643%" height="15" fill="rgb(251,115,12)"/><text x="71.0195%" y="414.50"></text></g><g><title>std::use_facet&lt;std::ctype&lt;char&gt; &gt; (locale_classes.tcc:139) (462 samples, 2.92%)</title><rect x="69.6431%" y="388" width="2.9237%" height="15" fill="rgb(240,54,50)"/><text x="69.8931%" y="398.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:160) (566 samples, 3.58%)</title><rect x="69.0672%" y="372" width="3.5818%" height="15" fill="rgb(233,84,52)"/><text x="69.3172%" y="382.50">std:..</text></g><g><title>std::has_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:110) (381 samples, 2.41%)</title><rect x="73.0667%" y="388" width="2.4111%" height="15" fill="rgb(207,117,47)"/><text x="73.3167%" y="398.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:164) (457 samples, 2.89%)</title><rect x="72.6490%" y="372" width="2.8920%" height="15" fill="rgb(249,43,39)"/><text x="72.8990%" y="382.50">st..</text></g><g><title>std::use_facet&lt;std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:139) (319 samples, 2.02%)</title><rect x="76.0347%" y="388" width="2.0187%" height="15" fill="rgb(209,38,44)"/><text x="76.2847%" y="398.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:165) (412 samples, 2.61%)</title><rect x="75.5411%" y="372" width="2.6073%" height="15" fill="rgb(236,212,23)"/><text x="75.7911%" y="382.50">st..</text></g><g><title>std::has_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:110) (349 samples, 2.21%)</title><rect x="78.5976%" y="388" width="2.2086%" height="15" fill="rgb(242,79,21)"/><text x="78.8476%" y="398.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:169) (428 samples, 2.71%)</title><rect x="78.1483%" y="372" width="2.7085%" height="15" fill="rgb(211,96,35)"/><text x="78.3983%" y="382.50">st..</text></g><g><title>std::use_facet&lt;std::num_get&lt;char, std::istreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt; &gt; (locale_classes.tcc:139) (289 samples, 1.83%)</title><rect x="81.4137%" y="388" width="1.8289%" height="15" fill="rgb(253,215,40)"/><text x="81.6637%" y="398.50">s..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::_M_cache_locale (basic_ios.tcc:170) (388 samples, 2.46%)</title><rect x="80.8569%" y="372" width="2.4554%" height="15" fill="rgb(211,81,21)"/><text x="81.1069%" y="382.50">st..</text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (basic_ios.tcc:152) (3,094 samples, 19.58%)</title><rect x="63.8590%" y="356" width="19.5798%" height="15" fill="rgb(208,190,38)"/><text x="64.1090%" y="366.50">std::basic_ios&lt;char, std::char_..</text></g><g><title>GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.3) (8,025 samples, 50.78%)</title><rect x="36.9637%" y="340" width="50.7847%" height="15" fill="rgb(235,213,38)"/><text x="37.2137%" y="350.50">GEOSGeomFromWKB_buf_r (libgeos_c.so.1.13.3)</text></g><g><title>OGRGeometry::exportToGEOS (libgdal.so.26.0.4) (8,697 samples, 55.04%)</title><rect x="34.3184%" y="308" width="55.0373%" height="15" fill="rgb(237,122,38)"/><text x="34.5684%" y="318.50">OGRGeometry::exportToGEOS (libgdal.so.26.0.4)</text></g><g><title>convertToGEOSGeom (libgdal.so.26.0.4) (8,548 samples, 54.09%)</title><rect x="35.2614%" y="324" width="54.0944%" height="15" fill="rgb(244,218,35)"/><text x="35.5114%" y="334.50">convertToGEOSGeom (libgdal.so.26.0.4)</text></g><g><title>cfree (libc-2.27.so) (305 samples, 1.93%)</title><rect x="89.4507%" y="308" width="1.9301%" height="15" fill="rgb(240,68,47)"/><text x="89.7007%" y="318.50">c..</text></g><g><title>0x7fb3702fdf54 (libc-2.27.so) (494 samples, 3.13%)</title><rect x="92.3997%" y="340" width="3.1262%" height="15" fill="rgb(210,16,53)"/><text x="92.6497%" y="350.50">0x7..</text></g><g><title>operator new (new_op.cc:50) (435 samples, 2.75%)</title><rect x="96.2726%" y="340" width="2.7528%" height="15" fill="rgb(235,124,12)"/><text x="96.5226%" y="350.50">op..</text></g><g><title>__libc_malloc (libc-2.27.so) (432 samples, 2.73%)</title><rect x="96.2916%" y="356" width="2.7338%" height="15" fill="rgb(224,169,11)"/><text x="96.5416%" y="366.50">__..</text></g><g><title>initGEOS_r (libgeos_c.so.1.13.3) (1,162 samples, 7.35%)</title><rect x="91.6846%" y="308" width="7.3535%" height="15" fill="rgb(250,166,2)"/><text x="91.9346%" y="318.50">initGEOS_r..</text></g><g><title>GEOS_init_r (libgeos_c.so.1.13.3) (1,138 samples, 7.20%)</title><rect x="91.8365%" y="324" width="7.2016%" height="15" fill="rgb(242,216,29)"/><text x="92.0865%" y="334.50">GEOS_init_..</text></g><g><title>OGRGeometry::Distance (libgdal.so.26.0.4) (13,115 samples, 83.00%)</title><rect x="16.2068%" y="292" width="82.9958%" height="15" fill="rgb(230,116,27)"/><text x="16.4568%" y="302.50">OGRGeometry::Distance (libgdal.so.26.0.4)</text></g><g><title>&lt;module&gt; (profile_geo.py:164) (15,681 samples, 99.23%)</title><rect x="0.6898%" y="52" width="99.2343%" height="15" fill="rgb(228,99,48)"/><text x="0.9398%" y="62.50">&lt;module&gt; (profile_geo.py:164)</text></g><g><title>wrapper (profile_geo.py:30) (15,681 samples, 99.23%)</title><rect x="0.6898%" y="68" width="99.2343%" height="15" fill="rgb(253,11,6)"/><text x="0.9398%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Distance (profile_geo.py:100) (15,681 samples, 99.23%)</title><rect x="0.6898%" y="84" width="99.2343%" height="15" fill="rgb(247,143,39)"/><text x="0.9398%" y="94.50">test_ST_Distance (profile_geo.py:100)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (15,680 samples, 99.23%)</title><rect x="0.6961%" y="100" width="99.2279%" height="15" fill="rgb(236,97,10)"/><text x="0.9461%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>ST_Distance (arctern/_wrapper_func.py:770) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="116" width="93.8742%" height="15" fill="rgb(233,208,19)"/><text x="6.2999%" y="126.50">ST_Distance (arctern/_wrapper_func.py:770)</text></g><g><title>ST_Distance (arctern_core_.pyx:117) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="132" width="93.8742%" height="15" fill="rgb(216,164,2)"/><text x="6.2999%" y="142.50">ST_Distance (arctern_core_.pyx:117)</text></g><g><title>ST_Distance (arctern_core_.pyx:118) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="148" width="93.8742%" height="15" fill="rgb(220,129,5)"/><text x="6.2999%" y="158.50">ST_Distance (arctern_core_.pyx:118)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="164" width="93.8742%" height="15" fill="rgb(242,17,10)"/><text x="6.2999%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="180" width="93.8742%" height="15" fill="rgb(242,107,0)"/><text x="6.2999%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="196" width="93.8742%" height="15" fill="rgb(251,28,31)"/><text x="6.2999%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="212" width="93.8742%" height="15" fill="rgb(233,223,10)"/><text x="6.2999%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Distance (libarctern.so) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="228" width="93.8742%" height="15" fill="rgb(215,21,27)"/><text x="6.2999%" y="238.50">arctern::gis::ST_Distance (libarctern.so)</text></g><g><title>arctern::gis::gdal::ST_Distance (libarctern.so) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="244" width="93.8742%" height="15" fill="rgb(232,23,21)"/><text x="6.2999%" y="254.50">arctern::gis::gdal::ST_Distance (libarctern.so)</text></g><g><title>arctern::gis::gdal::BinaryOp&lt;arrow::NumericBuilder&lt;arrow::DoubleType&gt; &gt; (libarctern.so) (14,834 samples, 93.87%)</title><rect x="6.0499%" y="260" width="93.8742%" height="15" fill="rgb(244,5,23)"/><text x="6.2999%" y="270.50">arctern::gis::gdal::BinaryOp&lt;arrow::NumericBuilder&lt;arrow::DoubleType&gt; &gt; (libarctern.so)</text></g><g><title>std::_Function_handler&lt;void (arrow::NumericBuilder&lt;arrow::DoubleType&gt;&amp;, OGRGeometry*, OGRGeometry*), arctern::gis::gdal::ST_Distance(std::shared_ptr&lt;arrow::Array&gt; const&amp;, std::shared_ptr&lt;arrow::Array&gt; const&amp;)::{lambda(arrow::NumericBuilder&lt;arrow::DoubleType&gt;&amp;, OGRGeometry*, OGRGeometry*)#1}&gt;::_M_invoke (libarctern.so) (13,270 samples, 83.98%)</title><rect x="15.9473%" y="276" width="83.9767%" height="15" fill="rgb(226,81,46)"/><text x="16.1973%" y="286.50">std::_Function_handler&lt;void (arrow::NumericBuilder&lt;arrow::DoubleType&gt;&amp;, OGRGeometry*, OGRGeometry*), arctern::gis::gdal::ST_Distance(std::sh..</text></g><g><title>all (15,802 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>