<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="582" onload="init(evt)" viewBox="0 0 1200 582" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="582" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="565.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="565.00"> </text><svg id="frames" x="10" width="1180"><g><title>sanitize_array (pandas/core/construction.py:440) (29 samples, 1.01%)</title><rect x="0.6947%" y="116" width="1.0073%" height="15" fill="rgb(227,0,7)"/><text x="0.9447%" y="126.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (29 samples, 1.01%)</title><rect x="0.6947%" y="132" width="1.0073%" height="15" fill="rgb(217,0,24)"/><text x="0.9447%" y="142.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:153) (43 samples, 1.49%)</title><rect x="0.5557%" y="52" width="1.4936%" height="15" fill="rgb(221,193,54)"/><text x="0.8057%" y="62.50"></text></g><g><title>gen_st_area_data (profile_geo.py:66) (43 samples, 1.49%)</title><rect x="0.5557%" y="68" width="1.4936%" height="15" fill="rgb(248,212,6)"/><text x="0.8057%" y="78.50"></text></g><g><title>_trans (profile_geo.py:43) (39 samples, 1.35%)</title><rect x="0.6947%" y="84" width="1.3546%" height="15" fill="rgb(208,68,35)"/><text x="0.9447%" y="94.50"></text></g><g><title>__init__ (pandas/core/series.py:305) (39 samples, 1.35%)</title><rect x="0.6947%" y="100" width="1.3546%" height="15" fill="rgb(232,128,0)"/><text x="0.9447%" y="110.50"></text></g><g><title>0x7f233bc8c78b (libc-2.27.so) (42 samples, 1.46%)</title><rect x="17.0198%" y="420" width="1.4588%" height="15" fill="rgb(207,160,47)"/><text x="17.2698%" y="430.50"></text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (65 samples, 2.26%)</title><rect x="16.5683%" y="292" width="2.2577%" height="15" fill="rgb(228,23,34)"/><text x="16.8183%" y="302.50">a..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (65 samples, 2.26%)</title><rect x="16.5683%" y="308" width="2.2577%" height="15" fill="rgb(218,30,26)"/><text x="16.8183%" y="318.50">a..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (65 samples, 2.26%)</title><rect x="16.5683%" y="324" width="2.2577%" height="15" fill="rgb(220,122,19)"/><text x="16.8183%" y="334.50">a..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (65 samples, 2.26%)</title><rect x="16.5683%" y="340" width="2.2577%" height="15" fill="rgb(250,228,42)"/><text x="16.8183%" y="350.50">j..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (65 samples, 2.26%)</title><rect x="16.5683%" y="356" width="2.2577%" height="15" fill="rgb(240,193,28)"/><text x="16.8183%" y="366.50">i..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (65 samples, 2.26%)</title><rect x="16.5683%" y="372" width="2.2577%" height="15" fill="rgb(216,20,37)"/><text x="16.8183%" y="382.50">j..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (65 samples, 2.26%)</title><rect x="16.5683%" y="388" width="2.2577%" height="15" fill="rgb(206,188,39)"/><text x="16.8183%" y="398.50">j..</text></g><g><title>memcpy (string3.h:52) (65 samples, 2.26%)</title><rect x="16.5683%" y="404" width="2.2577%" height="15" fill="rgb(217,207,13)"/><text x="16.8183%" y="414.50">m..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (351 samples, 12.19%)</title><rect x="7.5026%" y="276" width="12.1917%" height="15" fill="rgb(231,73,38)"/><text x="7.7526%" y="286.50">arrow::BaseBinaryB..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (497 samples, 17.26%)</title><rect x="5.7659%" y="260" width="17.2629%" height="15" fill="rgb(225,20,46)"/><text x="6.0159%" y="270.50">arrow::py::detail::BuilderA..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (62 samples, 2.15%)</title><rect x="20.8753%" y="276" width="2.1535%" height="15" fill="rgb(210,31,41)"/><text x="21.1253%" y="286.50">a..</text></g><g><title>ST_Area (arctern/_wrapper_func.py:838) (596 samples, 20.70%)</title><rect x="2.4314%" y="116" width="20.7016%" height="15" fill="rgb(221,200,47)"/><text x="2.6814%" y="126.50">ST_Area (arctern/_wrapper_func.py..</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (596 samples, 20.70%)</title><rect x="2.4314%" y="132" width="20.7016%" height="15" fill="rgb(226,26,5)"/><text x="2.6814%" y="142.50">array (pyarrow/lib.cpython-38-x86..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (596 samples, 20.70%)</title><rect x="2.4314%" y="148" width="20.7016%" height="15" fill="rgb(249,33,26)"/><text x="2.6814%" y="158.50">lib__ndarray_to_array (pyarrow/li..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (596 samples, 20.70%)</title><rect x="2.4314%" y="164" width="20.7016%" height="15" fill="rgb(235,183,28)"/><text x="2.6814%" y="174.50">arrow::py::NdarrayToArrow (libarr..</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (596 samples, 20.70%)</title><rect x="2.4314%" y="180" width="20.7016%" height="15" fill="rgb(221,5,38)"/><text x="2.6814%" y="190.50">arrow::py::NumPyConverter::Conver..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (596 samples, 20.70%)</title><rect x="2.4314%" y="196" width="20.7016%" height="15" fill="rgb(247,18,42)"/><text x="2.6814%" y="206.50">arrow::py::ConvertPySequence (lib..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (596 samples, 20.70%)</title><rect x="2.4314%" y="212" width="20.7016%" height="15" fill="rgb(241,131,45)"/><text x="2.6814%" y="222.50">arrow::py::TypedConverter&lt;arrow::..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (596 samples, 20.70%)</title><rect x="2.4314%" y="228" width="20.7016%" height="15" fill="rgb(249,31,29)"/><text x="2.6814%" y="238.50">arrow::py::internal::VisitSequenc..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (537 samples, 18.65%)</title><rect x="4.4807%" y="244" width="18.6523%" height="15" fill="rgb(225,111,53)"/><text x="4.7307%" y="254.50">arrow::py::TypedConverter&lt;arr..</text></g><g><title>0x7ffd2b9e674a ([vdso]) (36 samples, 1.25%)</title><rect x="23.2025%" y="180" width="1.2504%" height="15" fill="rgb(238,160,17)"/><text x="23.4525%" y="190.50"></text></g><g><title>0x4 (?) (52 samples, 1.81%)</title><rect x="23.1330%" y="132" width="1.8062%" height="15" fill="rgb(214,148,48)"/><text x="23.3830%" y="142.50">0..</text></g><g><title>clock_gettime (libc-2.27.so) (52 samples, 1.81%)</title><rect x="23.1330%" y="148" width="1.8062%" height="15" fill="rgb(232,36,49)"/><text x="23.3830%" y="158.50">c..</text></g><g><title>0x7ffd2b9e69ef ([vdso]) (51 samples, 1.77%)</title><rect x="23.1678%" y="164" width="1.7714%" height="15" fill="rgb(209,103,24)"/><text x="23.4178%" y="174.50">0..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append (libarctern.so) (367 samples, 12.75%)</title><rect x="27.8569%" y="308" width="12.7475%" height="15" fill="rgb(229,88,8)"/><text x="28.1069%" y="318.50">std::vector&lt;double,..</text></g><g><title>0x7f233bd5ff2d (libc-2.27.so) (367 samples, 12.75%)</title><rect x="27.8569%" y="324" width="12.7475%" height="15" fill="rgb(213,181,19)"/><text x="28.1069%" y="334.50">0x7f233bd5ff2d (lib..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputEvolveWith (libarctern.so) (399 samples, 13.86%)</title><rect x="27.4401%" y="292" width="13.8590%" height="15" fill="rgb(254,191,54)"/><text x="27.6901%" y="302.50">arctern::gis::cuda::G..</text></g><g><title>0x7f22280517f2 (libcuda.so.440.64.00) (194 samples, 6.74%)</title><rect x="41.4727%" y="436" width="6.7385%" height="15" fill="rgb(241,83,37)"/><text x="41.7227%" y="446.50">0x7f22280..</text></g><g><title>0x7f222805144e (libcuda.so.440.64.00) (41 samples, 1.42%)</title><rect x="48.8364%" y="452" width="1.4241%" height="15" fill="rgb(233,36,39)"/><text x="49.0864%" y="462.50"></text></g><g><title>0x7f2227f1d437 (libcuda.so.440.64.00) (37 samples, 1.29%)</title><rect x="55.7485%" y="532" width="1.2852%" height="15" fill="rgb(226,3,54)"/><text x="55.9985%" y="542.50"></text></g><g><title>0x7f22280de83a (libcuda.so.440.64.00) (54 samples, 1.88%)</title><rect x="55.5401%" y="516" width="1.8757%" height="15" fill="rgb(245,192,40)"/><text x="55.7901%" y="526.50">0..</text></g><g><title>0x7f22280de854 (libcuda.so.440.64.00) (42 samples, 1.46%)</title><rect x="58.3536%" y="516" width="1.4588%" height="15" fill="rgb(238,167,29)"/><text x="58.6036%" y="526.50"></text></g><g><title>0x7f2227e6efaf (libcuda.so.440.64.00) (213 samples, 7.40%)</title><rect x="53.3519%" y="500" width="7.3984%" height="15" fill="rgb(232,182,51)"/><text x="53.6019%" y="510.50">0x7f2227e6..</text></g><g><title>0x7f22280de854 (libcuda.so.440.64.00) (29 samples, 1.01%)</title><rect x="64.5363%" y="516" width="1.0073%" height="15" fill="rgb(231,60,39)"/><text x="64.7863%" y="526.50"></text></g><g><title>0x7f2227e6f0b7 (libcuda.so.440.64.00) (125 samples, 4.34%)</title><rect x="61.4449%" y="500" width="4.3418%" height="15" fill="rgb(208,69,12)"/><text x="61.6949%" y="510.50">0x7f2..</text></g><g><title>0x7f2227f1a780 (libcuda.so.440.64.00) (535 samples, 18.58%)</title><rect x="51.0247%" y="484" width="18.5828%" height="15" fill="rgb(235,93,37)"/><text x="51.2747%" y="494.50">0x7f2227f1a780 (libcuda.so.44..</text></g><g><title>0x7f2227e6f133 (libcuda.so.440.64.00) (94 samples, 3.27%)</title><rect x="66.3425%" y="500" width="3.2650%" height="15" fill="rgb(213,116,39)"/><text x="66.5925%" y="510.50">0x7..</text></g><g><title>0x7f2228051547 (libcuda.so.440.64.00) (559 samples, 19.42%)</title><rect x="50.4689%" y="452" width="19.4165%" height="15" fill="rgb(222,207,29)"/><text x="50.7189%" y="462.50">0x7f2228051547 (libcuda.so.440..</text></g><g><title>0x7f2227f1a91f (libcuda.so.440.64.00) (552 samples, 19.17%)</title><rect x="50.7121%" y="468" width="19.1733%" height="15" fill="rgb(206,96,30)"/><text x="50.9621%" y="478.50">0x7f2227f1a91f (libcuda.so.440..</text></g><g><title>0x7f2228051804 (libcuda.so.440.64.00) (652 samples, 22.65%)</title><rect x="48.2459%" y="436" width="22.6468%" height="15" fill="rgb(218,138,4)"/><text x="48.4959%" y="446.50">0x7f2228051804 (libcuda.so.440.64.00)</text></g><g><title>0x7f2228051837 (libcuda.so.440.64.00) (39 samples, 1.35%)</title><rect x="71.4832%" y="436" width="1.3546%" height="15" fill="rgb(250,191,14)"/><text x="71.7332%" y="446.50"></text></g><g><title>0x7f2228073653 (libcuda.so.440.64.00) (905 samples, 31.43%)</title><rect x="41.4727%" y="420" width="31.4345%" height="15" fill="rgb(239,60,40)"/><text x="41.7227%" y="430.50">0x7f2228073653 (libcuda.so.440.64.00)</text></g><g><title>0x7f2227e8b634 (libcuda.so.440.64.00) (101 samples, 3.51%)</title><rect x="72.9073%" y="452" width="3.5082%" height="15" fill="rgb(206,27,48)"/><text x="73.1573%" y="462.50">0x7..</text></g><g><title>0x7f2228073696 (libcuda.so.440.64.00) (142 samples, 4.93%)</title><rect x="72.9073%" y="420" width="4.9323%" height="15" fill="rgb(225,35,8)"/><text x="73.1573%" y="430.50">0x7f22..</text></g><g><title>0x7f2227f4d5ce (libcuda.so.440.64.00) (142 samples, 4.93%)</title><rect x="72.9073%" y="436" width="4.9323%" height="15" fill="rgb(250,213,24)"/><text x="73.1573%" y="446.50">0x7f22..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputFinalizeWith (libarctern.so) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="292" width="36.5752%" height="15" fill="rgb(247,123,22)"/><text x="41.5491%" y="302.50">arctern::gis::cuda::GeometryVector::OutputFinalizeWith (lib..</text></g><g><title>cudaMemcpy (libarctern.so) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="308" width="36.5752%" height="15" fill="rgb(231,138,38)"/><text x="41.5491%" y="318.50">cudaMemcpy (libarctern.so)</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="324" width="36.5752%" height="15" fill="rgb(231,145,46)"/><text x="41.5491%" y="334.50">cudart::cudaApiMemcpy (libarctern.so)</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="340" width="36.5752%" height="15" fill="rgb(251,118,11)"/><text x="41.5491%" y="350.50">cudart::driverHelper::memcpyDispatch (libarctern.so)</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="356" width="36.5752%" height="15" fill="rgb(217,147,25)"/><text x="41.5491%" y="366.50">cuMemcpy (libcuda.so.440.64.00)</text></g><g><title>0x7f2227e528c4 (libcuda.so.440.64.00) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="372" width="36.5752%" height="15" fill="rgb(247,81,37)"/><text x="41.5491%" y="382.50">0x7f2227e528c4 (libcuda.so.440.64.00)</text></g><g><title>0x7f2227e52612 (libcuda.so.440.64.00) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="388" width="36.5752%" height="15" fill="rgb(209,12,38)"/><text x="41.5491%" y="398.50">0x7f2227e52612 (libcuda.so.440.64.00)</text></g><g><title>0x7f2227f4dd88 (libcuda.so.440.64.00) (1,053 samples, 36.58%)</title><rect x="41.2991%" y="404" width="36.5752%" height="15" fill="rgb(227,1,9)"/><text x="41.5491%" y="414.50">0x7f2227f4dd88 (libcuda.so.440.64.00)</text></g><g><title>arctern::gis::cuda::internal::ArrowWkbToGeometryVectorImpl (libarctern.so) (1,491 samples, 51.79%)</title><rect x="27.3011%" y="276" width="51.7888%" height="15" fill="rgb(248,47,43)"/><text x="27.5511%" y="286.50">arctern::gis::cuda::internal::ArrowWkbToGeometryVectorImpl (libarctern.so)</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputInitialize (libarctern.so) (35 samples, 1.22%)</title><rect x="77.8743%" y="292" width="1.2157%" height="15" fill="rgb(221,10,30)"/><text x="78.1243%" y="302.50"></text></g><g><title>0x7f2227f55292 (libcuda.so.440.64.00) (39 samples, 1.35%)</title><rect x="79.2984%" y="436" width="1.3546%" height="15" fill="rgb(210,229,1)"/><text x="79.5484%" y="446.50"></text></g><g><title>0x7f2227f5477e (libcuda.so.440.64.00) (39 samples, 1.35%)</title><rect x="79.2984%" y="452" width="1.3546%" height="15" fill="rgb(222,148,37)"/><text x="79.5484%" y="462.50"></text></g><g><title>0x7f222815e021 (libcuda.so.440.64.00) (39 samples, 1.35%)</title><rect x="79.2984%" y="468" width="1.3546%" height="15" fill="rgb(234,67,33)"/><text x="79.5484%" y="478.50"></text></g><g><title>nvPTXCompilerCompile (libnvidia-ptxjitcompiler.so.440.64.00) (39 samples, 1.35%)</title><rect x="79.2984%" y="484" width="1.3546%" height="15" fill="rgb(247,98,35)"/><text x="79.5484%" y="494.50"></text></g><g><title>__cuda_CallJitEntryPoint (libnvidia-ptxjitcompiler.so.440.64.00) (39 samples, 1.35%)</title><rect x="79.2984%" y="500" width="1.3546%" height="15" fill="rgb(247,138,52)"/><text x="79.5484%" y="510.50"></text></g><g><title>cudart::doLazyInitContextState (libarctern.so) (43 samples, 1.49%)</title><rect x="79.1942%" y="308" width="1.4936%" height="15" fill="rgb(213,79,30)"/><text x="79.4442%" y="318.50"></text></g><g><title>cudart::contextStateManager::getRuntimeContextState (libarctern.so) (43 samples, 1.49%)</title><rect x="79.1942%" y="324" width="1.4936%" height="15" fill="rgb(246,177,23)"/><text x="79.4442%" y="334.50"></text></g><g><title>cudart::contextStateManager::initRuntimeContextState_nonreentrant (libarctern.so) (40 samples, 1.39%)</title><rect x="79.2984%" y="340" width="1.3894%" height="15" fill="rgb(230,62,27)"/><text x="79.5484%" y="350.50"></text></g><g><title>cudart::contextState::applyChanges (libarctern.so) (40 samples, 1.39%)</title><rect x="79.2984%" y="356" width="1.3894%" height="15" fill="rgb(216,154,8)"/><text x="79.5484%" y="366.50"></text></g><g><title>cudart::globalModule::loadIntoContext (libarctern.so) (40 samples, 1.39%)</title><rect x="79.2984%" y="372" width="1.3894%" height="15" fill="rgb(244,35,45)"/><text x="79.5484%" y="382.50"></text></g><g><title>cudart::contextState::loadCubin (libarctern.so) (40 samples, 1.39%)</title><rect x="79.2984%" y="388" width="1.3894%" height="15" fill="rgb(251,115,12)"/><text x="79.5484%" y="398.50"></text></g><g><title>0x7f2227e8d42c (libcuda.so.440.64.00) (40 samples, 1.39%)</title><rect x="79.2984%" y="404" width="1.3894%" height="15" fill="rgb(240,54,50)"/><text x="79.5484%" y="414.50"></text></g><g><title>0x7f2227e8ce98 (libcuda.so.440.64.00) (40 samples, 1.39%)</title><rect x="79.2984%" y="420" width="1.3894%" height="15" fill="rgb(233,84,52)"/><text x="79.5484%" y="430.50"></text></g><g><title>cudart::cudaApiMalloc (libarctern.so) (44 samples, 1.53%)</title><rect x="79.1942%" y="292" width="1.5283%" height="15" fill="rgb(207,117,47)"/><text x="79.4442%" y="302.50"></text></g><g><title>cudaMalloc (libarctern.so) (49 samples, 1.70%)</title><rect x="79.1942%" y="276" width="1.7020%" height="15" fill="rgb(249,43,39)"/><text x="79.4442%" y="286.50"></text></g><g><title>0x7f2227e8b634 (libcuda.so.440.64.00) (111 samples, 3.86%)</title><rect x="81.0351%" y="420" width="3.8555%" height="15" fill="rgb(209,38,44)"/><text x="81.2851%" y="430.50">0x7f..</text></g><g><title>arctern::gis::cuda::ArrowWkbToGeometryVector (libarctern.so) (1,691 samples, 58.74%)</title><rect x="27.3011%" y="260" width="58.7357%" height="15" fill="rgb(236,212,23)"/><text x="27.5511%" y="270.50">arctern::gis::cuda::ArrowWkbToGeometryVector (libarctern.so)</text></g><g><title>cudaMemcpy (libarctern.so) (148 samples, 5.14%)</title><rect x="80.8961%" y="276" width="5.1407%" height="15" fill="rgb(242,79,21)"/><text x="81.1461%" y="286.50">cudaMe..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (148 samples, 5.14%)</title><rect x="80.8961%" y="292" width="5.1407%" height="15" fill="rgb(211,96,35)"/><text x="81.1461%" y="302.50">cudart..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (148 samples, 5.14%)</title><rect x="80.8961%" y="308" width="5.1407%" height="15" fill="rgb(253,215,40)"/><text x="81.1461%" y="318.50">cudart..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (148 samples, 5.14%)</title><rect x="80.8961%" y="324" width="5.1407%" height="15" fill="rgb(211,81,21)"/><text x="81.1461%" y="334.50">cuMemc..</text></g><g><title>0x7f2227e528c4 (libcuda.so.440.64.00) (148 samples, 5.14%)</title><rect x="80.8961%" y="340" width="5.1407%" height="15" fill="rgb(208,190,38)"/><text x="81.1461%" y="350.50">0x7f22..</text></g><g><title>0x7f2227e52612 (libcuda.so.440.64.00) (148 samples, 5.14%)</title><rect x="80.8961%" y="356" width="5.1407%" height="15" fill="rgb(235,213,38)"/><text x="81.1461%" y="366.50">0x7f22..</text></g><g><title>0x7f2227f4dd25 (libcuda.so.440.64.00) (148 samples, 5.14%)</title><rect x="80.8961%" y="372" width="5.1407%" height="15" fill="rgb(237,122,38)"/><text x="81.1461%" y="382.50">0x7f22..</text></g><g><title>0x7f2228073168 (libcuda.so.440.64.00) (144 samples, 5.00%)</title><rect x="81.0351%" y="388" width="5.0017%" height="15" fill="rgb(244,218,35)"/><text x="81.2851%" y="398.50">0x7f22..</text></g><g><title>0x7f2227f4d5ce (libcuda.so.440.64.00) (144 samples, 5.00%)</title><rect x="81.0351%" y="404" width="5.0017%" height="15" fill="rgb(240,68,47)"/><text x="81.2851%" y="414.50">0x7f22..</text></g><g><title>0x7f2227e8b640 (libcuda.so.440.64.00) (109 samples, 3.79%)</title><rect x="87.5651%" y="452" width="3.7860%" height="15" fill="rgb(210,16,53)"/><text x="87.8151%" y="462.50">0x7f..</text></g><g><title>arctern::gis::cuda::GpuMemcpy&lt;double&gt; (libarctern.so) (136 samples, 4.72%)</title><rect x="87.0788%" y="292" width="4.7239%" height="15" fill="rgb(235,124,12)"/><text x="87.3288%" y="302.50">arcter..</text></g><g><title>cudaMemcpy (libarctern.so) (136 samples, 4.72%)</title><rect x="87.0788%" y="308" width="4.7239%" height="15" fill="rgb(224,169,11)"/><text x="87.3288%" y="318.50">cudaMe..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (136 samples, 4.72%)</title><rect x="87.0788%" y="324" width="4.7239%" height="15" fill="rgb(250,166,2)"/><text x="87.3288%" y="334.50">cudart..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (136 samples, 4.72%)</title><rect x="87.0788%" y="340" width="4.7239%" height="15" fill="rgb(242,216,29)"/><text x="87.3288%" y="350.50">cudart..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (136 samples, 4.72%)</title><rect x="87.0788%" y="356" width="4.7239%" height="15" fill="rgb(230,116,27)"/><text x="87.3288%" y="366.50">cuMemc..</text></g><g><title>0x7f2227e528c4 (libcuda.so.440.64.00) (136 samples, 4.72%)</title><rect x="87.0788%" y="372" width="4.7239%" height="15" fill="rgb(228,99,48)"/><text x="87.3288%" y="382.50">0x7f22..</text></g><g><title>0x7f2227e52612 (libcuda.so.440.64.00) (136 samples, 4.72%)</title><rect x="87.0788%" y="388" width="4.7239%" height="15" fill="rgb(253,11,6)"/><text x="87.3288%" y="398.50">0x7f22..</text></g><g><title>0x7f2227f4dd25 (libcuda.so.440.64.00) (136 samples, 4.72%)</title><rect x="87.0788%" y="404" width="4.7239%" height="15" fill="rgb(247,143,39)"/><text x="87.3288%" y="414.50">0x7f22..</text></g><g><title>0x7f2228073168 (libcuda.so.440.64.00) (133 samples, 4.62%)</title><rect x="87.1830%" y="420" width="4.6197%" height="15" fill="rgb(236,97,10)"/><text x="87.4330%" y="430.50">0x7f2..</text></g><g><title>0x7f2227f4d5ce (libcuda.so.440.64.00) (133 samples, 4.62%)</title><rect x="87.1830%" y="436" width="4.6197%" height="15" fill="rgb(233,208,19)"/><text x="87.4330%" y="446.50">0x7f2..</text></g><g><title>arctern::gis::cuda::GeometryVector::CreateReadGpuContext (libarctern.so) (188 samples, 6.53%)</title><rect x="86.0368%" y="276" width="6.5300%" height="15" fill="rgb(216,164,2)"/><text x="86.2868%" y="286.50">arctern::..</text></g><g><title>arctern::gis::cuda::ST_Area (libarctern.so) (211 samples, 7.33%)</title><rect x="86.0368%" y="260" width="7.3289%" height="15" fill="rgb(220,129,5)"/><text x="86.2868%" y="270.50">arctern::g..</text></g><g><title>arctern::gis::cuda::ST_Area (libarctern.so) (1,986 samples, 68.98%)</title><rect x="25.4255%" y="244" width="68.9823%" height="15" fill="rgb(242,17,10)"/><text x="25.6755%" y="254.50">arctern::gis::cuda::ST_Area (libarctern.so)</text></g><g><title>ST_Area (arctern/_wrapper_func.py:839) (2,197 samples, 76.31%)</title><rect x="23.1330%" y="116" width="76.3112%" height="15" fill="rgb(242,107,0)"/><text x="23.3830%" y="126.50">ST_Area (arctern/_wrapper_func.py:839)</text></g><g><title>ST_Area (arctern_core_.pyx:123) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="132" width="74.0188%" height="15" fill="rgb(251,28,31)"/><text x="25.6755%" y="142.50">ST_Area (arctern_core_.pyx:123)</text></g><g><title>ST_Area (arctern_core_.pyx:124) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="148" width="74.0188%" height="15" fill="rgb(233,223,10)"/><text x="25.6755%" y="158.50">ST_Area (arctern_core_.pyx:124)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="164" width="74.0188%" height="15" fill="rgb(215,21,27)"/><text x="25.6755%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="180" width="74.0188%" height="15" fill="rgb(232,23,21)"/><text x="25.6755%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="196" width="74.0188%" height="15" fill="rgb(244,5,23)"/><text x="25.6755%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="212" width="74.0188%" height="15" fill="rgb(226,81,46)"/><text x="25.6755%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Area (libarctern.so) (2,131 samples, 74.02%)</title><rect x="25.4255%" y="228" width="74.0188%" height="15" fill="rgb(247,70,30)"/><text x="25.6755%" y="238.50">arctern::gis::ST_Area (libarctern.so)</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (145 samples, 5.04%)</title><rect x="94.4078%" y="244" width="5.0365%" height="15" fill="rgb(212,68,19)"/><text x="94.6578%" y="254.50">arcter..</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (145 samples, 5.04%)</title><rect x="94.4078%" y="260" width="5.0365%" height="15" fill="rgb(240,187,13)"/><text x="94.6578%" y="270.50">arcter..</text></g><g><title>arctern::gis::dispatch::WkbTypeScanner::Scan (libarctern.so) (145 samples, 5.04%)</title><rect x="94.4078%" y="276" width="5.0365%" height="15" fill="rgb(223,113,26)"/><text x="94.6578%" y="286.50">arcter..</text></g><g><title>&lt;module&gt; (profile_geo.py:165) (2,804 samples, 97.39%)</title><rect x="2.4314%" y="52" width="97.3949%" height="15" fill="rgb(206,192,2)"/><text x="2.6814%" y="62.50">&lt;module&gt; (profile_geo.py:165)</text></g><g><title>wrapper (profile_geo.py:30) (2,804 samples, 97.39%)</title><rect x="2.4314%" y="68" width="97.3949%" height="15" fill="rgb(241,108,4)"/><text x="2.6814%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Area (profile_geo.py:105) (2,804 samples, 97.39%)</title><rect x="2.4314%" y="84" width="97.3949%" height="15" fill="rgb(247,173,49)"/><text x="2.6814%" y="94.50">test_ST_Area (profile_geo.py:105)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (2,804 samples, 97.39%)</title><rect x="2.4314%" y="100" width="97.3949%" height="15" fill="rgb(224,114,35)"/><text x="2.6814%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>all (2,879 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>