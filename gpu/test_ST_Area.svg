<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="549.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="549.00"> </text><svg id="frames" x="10" width="1180"><g><title>PyArray_GetArrayParamsFromObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (23 samples, 1.04%)</title><rect x="0.0908%" y="196" width="1.0440%" height="15" fill="rgb(227,0,7)"/><text x="0.3408%" y="206.50"></text></g><g><title>discover_dimensions (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (23 samples, 1.04%)</title><rect x="0.0908%" y="212" width="1.0440%" height="15" fill="rgb(217,0,24)"/><text x="0.3408%" y="222.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (27 samples, 1.23%)</title><rect x="0.0454%" y="132" width="1.2256%" height="15" fill="rgb(221,193,54)"/><text x="0.2954%" y="142.50"></text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1479) (26 samples, 1.18%)</title><rect x="0.0908%" y="148" width="1.1802%" height="15" fill="rgb(248,212,6)"/><text x="0.3408%" y="158.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (26 samples, 1.18%)</title><rect x="0.0908%" y="164" width="1.1802%" height="15" fill="rgb(208,68,35)"/><text x="0.3408%" y="174.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (26 samples, 1.18%)</title><rect x="0.0908%" y="180" width="1.1802%" height="15" fill="rgb(232,128,0)"/><text x="0.3408%" y="190.50"></text></g><g><title>sanitize_array (pandas/core/construction.py:440) (29 samples, 1.32%)</title><rect x="0.0454%" y="116" width="1.3164%" height="15" fill="rgb(207,160,47)"/><text x="0.2954%" y="126.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:145) (44 samples, 2.00%)</title><rect x="0.0000%" y="52" width="1.9973%" height="15" fill="rgb(228,23,34)"/><text x="0.2500%" y="62.50">&lt;..</text></g><g><title>gen_st_area_data (profile_geo.py:58) (44 samples, 2.00%)</title><rect x="0.0000%" y="68" width="1.9973%" height="15" fill="rgb(218,30,26)"/><text x="0.2500%" y="78.50">g..</text></g><g><title>_trans (profile_geo.py:43) (43 samples, 1.95%)</title><rect x="0.0454%" y="84" width="1.9519%" height="15" fill="rgb(220,122,19)"/><text x="0.2954%" y="94.50">_..</text></g><g><title>__init__ (pandas/core/series.py:305) (43 samples, 1.95%)</title><rect x="0.0454%" y="100" width="1.9519%" height="15" fill="rgb(250,228,42)"/><text x="0.2954%" y="110.50">_..</text></g><g><title>0x7f2a6b9785e8 (libc-2.27.so) (25 samples, 1.13%)</title><rect x="14.6618%" y="292" width="1.1348%" height="15" fill="rgb(240,193,28)"/><text x="14.9118%" y="302.50"></text></g><g><title>0x7f2a6b9785eb (libc-2.27.so) (23 samples, 1.04%)</title><rect x="15.7966%" y="292" width="1.0440%" height="15" fill="rgb(216,20,37)"/><text x="16.0466%" y="302.50"></text></g><g><title>0x7f2a6b9785ef (libc-2.27.so) (27 samples, 1.23%)</title><rect x="16.8407%" y="292" width="1.2256%" height="15" fill="rgb(206,188,39)"/><text x="17.0907%" y="302.50"></text></g><g><title>0x7f2a6b9785f3 (libc-2.27.so) (23 samples, 1.04%)</title><rect x="18.0663%" y="292" width="1.0440%" height="15" fill="rgb(217,207,13)"/><text x="18.3163%" y="302.50"></text></g><g><title>0x7f2a6b9785f7 (libc-2.27.so) (40 samples, 1.82%)</title><rect x="19.1103%" y="292" width="1.8157%" height="15" fill="rgb(231,73,38)"/><text x="19.3603%" y="302.50">0..</text></g><g><title>0x7f2a6b97878b (libc-2.27.so) (92 samples, 4.18%)</title><rect x="22.6055%" y="420" width="4.1761%" height="15" fill="rgb(225,20,46)"/><text x="22.8555%" y="430.50">0x7f2..</text></g><g><title>0x7f2a6b9787e1 (libc-2.27.so) (34 samples, 1.54%)</title><rect x="27.5079%" y="420" width="1.5433%" height="15" fill="rgb(210,31,41)"/><text x="27.7579%" y="430.50"></text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (177 samples, 8.03%)</title><rect x="21.3799%" y="292" width="8.0345%" height="15" fill="rgb(221,200,47)"/><text x="21.6299%" y="302.50">arrow::Buff..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (177 samples, 8.03%)</title><rect x="21.3799%" y="308" width="8.0345%" height="15" fill="rgb(226,26,5)"/><text x="21.6299%" y="318.50">arrow::Pool..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (177 samples, 8.03%)</title><rect x="21.3799%" y="324" width="8.0345%" height="15" fill="rgb(249,33,26)"/><text x="21.6299%" y="334.50">arrow::Base..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (177 samples, 8.03%)</title><rect x="21.3799%" y="340" width="8.0345%" height="15" fill="rgb(235,183,28)"/><text x="21.6299%" y="350.50">je_arrow_ra..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (177 samples, 8.03%)</title><rect x="21.3799%" y="356" width="8.0345%" height="15" fill="rgb(221,5,38)"/><text x="21.6299%" y="366.50">iralloct (j..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (177 samples, 8.03%)</title><rect x="21.3799%" y="372" width="8.0345%" height="15" fill="rgb(247,18,42)"/><text x="21.6299%" y="382.50">je_arrow_pr..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (177 samples, 8.03%)</title><rect x="21.3799%" y="388" width="8.0345%" height="15" fill="rgb(241,131,45)"/><text x="21.6299%" y="398.50">je_arrow_pr..</text></g><g><title>memcpy (string3.h:52) (177 samples, 8.03%)</title><rect x="21.3799%" y="404" width="8.0345%" height="15" fill="rgb(249,31,29)"/><text x="21.6299%" y="414.50">memcpy (str..</text></g><g><title>arrow::Status::Status (libarrow_python.so.16.0.0) (25 samples, 1.13%)</title><rect x="29.4144%" y="292" width="1.1348%" height="15" fill="rgb(225,111,53)"/><text x="29.6644%" y="302.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (489 samples, 22.20%)</title><rect x="8.4430%" y="276" width="22.1970%" height="15" fill="rgb(238,160,17)"/><text x="8.6930%" y="286.50">arrow::BaseBinaryBuilder&lt;arrow::Bin..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (661 samples, 30.00%)</title><rect x="6.4911%" y="260" width="30.0045%" height="15" fill="rgb(214,148,48)"/><text x="6.7411%" y="270.50">arrow::py::detail::BuilderAppend (libarrow_pytho..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (107 samples, 4.86%)</title><rect x="31.6387%" y="276" width="4.8570%" height="15" fill="rgb(232,36,49)"/><text x="31.8887%" y="286.50">arrow:..</text></g><g><title>arrow::py::PyBytesView::FromBinary (libarrow_python.so.16.0.0) (37 samples, 1.68%)</title><rect x="34.8162%" y="292" width="1.6795%" height="15" fill="rgb(209,103,24)"/><text x="35.0662%" y="302.50"></text></g><g><title>ST_Area (arctern/_wrapper_func.py:838) (755 samples, 34.27%)</title><rect x="2.4058%" y="116" width="34.2714%" height="15" fill="rgb(229,88,8)"/><text x="2.6558%" y="126.50">ST_Area (arctern/_wrapper_func.py:838)</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (755 samples, 34.27%)</title><rect x="2.4058%" y="132" width="34.2714%" height="15" fill="rgb(213,181,19)"/><text x="2.6558%" y="142.50">array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so)</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (755 samples, 34.27%)</title><rect x="2.4058%" y="148" width="34.2714%" height="15" fill="rgb(254,191,54)"/><text x="2.6558%" y="158.50">lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-lin..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (755 samples, 34.27%)</title><rect x="2.4058%" y="164" width="34.2714%" height="15" fill="rgb(241,83,37)"/><text x="2.6558%" y="174.50">arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0)</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (755 samples, 34.27%)</title><rect x="2.4058%" y="180" width="34.2714%" height="15" fill="rgb(233,36,39)"/><text x="2.6558%" y="190.50">arrow::py::NumPyConverter::Convert (libarrow_python.so.1..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (755 samples, 34.27%)</title><rect x="2.4058%" y="196" width="34.2714%" height="15" fill="rgb(226,3,54)"/><text x="2.6558%" y="206.50">arrow::py::ConvertPySequence (libarrow_python.so.16.0.0)</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (755 samples, 34.27%)</title><rect x="2.4058%" y="212" width="34.2714%" height="15" fill="rgb(245,192,40)"/><text x="2.6558%" y="222.50">arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (755 samples, 34.27%)</title><rect x="2.4058%" y="228" width="34.2714%" height="15" fill="rgb(238,167,29)"/><text x="2.6558%" y="238.50">arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status ..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (704 samples, 31.96%)</title><rect x="4.7208%" y="244" width="31.9564%" height="15" fill="rgb(232,182,51)"/><text x="4.9708%" y="254.50">arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::..</text></g><g><title>0x4 (?) (26 samples, 1.18%)</title><rect x="36.6773%" y="132" width="1.1802%" height="15" fill="rgb(231,60,39)"/><text x="36.9273%" y="142.50"></text></g><g><title>clock_gettime (libc-2.27.so) (26 samples, 1.18%)</title><rect x="36.6773%" y="148" width="1.1802%" height="15" fill="rgb(208,69,12)"/><text x="36.9273%" y="158.50"></text></g><g><title>0x7ffcce3ba9ef ([vdso]) (25 samples, 1.13%)</title><rect x="36.7227%" y="164" width="1.1348%" height="15" fill="rgb(235,93,37)"/><text x="36.9727%" y="174.50"></text></g><g><title>0x7f2a6ba4be69 (libc-2.27.so) (26 samples, 1.18%)</title><rect x="38.9469%" y="260" width="1.1802%" height="15" fill="rgb(213,116,39)"/><text x="39.1969%" y="270.50"></text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append (libarctern.so) (251 samples, 11.39%)</title><rect x="42.1698%" y="308" width="11.3936%" height="15" fill="rgb(222,207,29)"/><text x="42.4198%" y="318.50">std::vector&lt;doubl..</text></g><g><title>0x7f2a6ba4bf2d (libc-2.27.so) (251 samples, 11.39%)</title><rect x="42.1698%" y="324" width="11.3936%" height="15" fill="rgb(206,96,30)"/><text x="42.4198%" y="334.50">0x7f2a6ba4bf2d (l..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputEvolveWith (libarctern.so) (305 samples, 13.84%)</title><rect x="41.1257%" y="292" width="13.8448%" height="15" fill="rgb(218,138,4)"/><text x="41.3757%" y="302.50">arctern::gis::cuda::G..</text></g><g><title>std::vector&lt;unsigned int, std::allocator&lt;unsigned int&gt; &gt;::_M_default_append (libarctern.so) (31 samples, 1.41%)</title><rect x="53.5633%" y="308" width="1.4072%" height="15" fill="rgb(250,191,14)"/><text x="53.8133%" y="318.50"></text></g><g><title>0x7f2a6ba4bf2d (libc-2.27.so) (31 samples, 1.41%)</title><rect x="53.5633%" y="324" width="1.4072%" height="15" fill="rgb(239,60,40)"/><text x="53.8133%" y="334.50"></text></g><g><title>0x7f2995d3e7f2 (libcuda.so.440.64.00) (75 samples, 3.40%)</title><rect x="55.0159%" y="436" width="3.4044%" height="15" fill="rgb(206,27,48)"/><text x="55.2659%" y="446.50">0x7..</text></g><g><title>0x7f2995d3e44e (libcuda.so.440.64.00) (26 samples, 1.18%)</title><rect x="58.8289%" y="452" width="1.1802%" height="15" fill="rgb(225,35,8)"/><text x="59.0789%" y="462.50"></text></g><g><title>0x7f2995dcb83a (libcuda.so.440.64.00) (23 samples, 1.04%)</title><rect x="64.5937%" y="516" width="1.0440%" height="15" fill="rgb(250,213,24)"/><text x="64.8437%" y="526.50"></text></g><g><title>0x7f2995b5bfaf (libcuda.so.440.64.00) (106 samples, 4.81%)</title><rect x="62.3695%" y="500" width="4.8116%" height="15" fill="rgb(247,123,22)"/><text x="62.6195%" y="510.50">0x7f29..</text></g><g><title>0x7f2995b5c0b7 (libcuda.so.440.64.00) (57 samples, 2.59%)</title><rect x="67.7712%" y="500" width="2.5874%" height="15" fill="rgb(231,138,38)"/><text x="68.0212%" y="510.50">0x..</text></g><g><title>0x7f2995dcb83a (libcuda.so.440.64.00) (27 samples, 1.23%)</title><rect x="72.0381%" y="516" width="1.2256%" height="15" fill="rgb(231,145,46)"/><text x="72.2881%" y="526.50"></text></g><g><title>0x7f2995c07780 (libcuda.so.440.64.00) (290 samples, 13.16%)</title><rect x="60.9623%" y="484" width="13.1639%" height="15" fill="rgb(251,118,11)"/><text x="61.2123%" y="494.50">0x7f2995c07780 (libc..</text></g><g><title>0x7f2995b5c133 (libcuda.so.440.64.00) (74 samples, 3.36%)</title><rect x="70.7671%" y="500" width="3.3591%" height="15" fill="rgb(217,147,25)"/><text x="71.0171%" y="510.50">0x7..</text></g><g><title>0x7f2995d3e547 (libcuda.so.440.64.00) (320 samples, 14.53%)</title><rect x="60.1453%" y="452" width="14.5256%" height="15" fill="rgb(247,81,37)"/><text x="60.3953%" y="462.50">0x7f2995d3e547 (libcud..</text></g><g><title>0x7f2995c0791f (libcuda.so.440.64.00) (314 samples, 14.25%)</title><rect x="60.4176%" y="468" width="14.2533%" height="15" fill="rgb(209,12,38)"/><text x="60.6676%" y="478.50">0x7f2995c0791f (libcud..</text></g><g><title>0x7f2995d3e804 (libcuda.so.440.64.00) (378 samples, 17.16%)</title><rect x="58.4657%" y="436" width="17.1584%" height="15" fill="rgb(227,1,9)"/><text x="58.7157%" y="446.50">0x7f2995d3e804 (libcuda.so...</text></g><g><title>0x7f2995d60653 (libcuda.so.440.64.00) (479 samples, 21.74%)</title><rect x="55.0159%" y="420" width="21.7431%" height="15" fill="rgb(248,47,43)"/><text x="55.2659%" y="430.50">0x7f2995d60653 (libcuda.so.440.64...</text></g><g><title>0x7f2995b78634 (libcuda.so.440.64.00) (59 samples, 2.68%)</title><rect x="76.7590%" y="452" width="2.6782%" height="15" fill="rgb(221,10,30)"/><text x="77.0090%" y="462.50">0x..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputFinalizeWith (libarctern.so) (567 samples, 25.74%)</title><rect x="54.9705%" y="292" width="25.7376%" height="15" fill="rgb(210,229,1)"/><text x="55.2205%" y="302.50">arctern::gis::cuda::GeometryVector::Outpu..</text></g><g><title>cudaMemcpy (libarctern.so) (567 samples, 25.74%)</title><rect x="54.9705%" y="308" width="25.7376%" height="15" fill="rgb(222,148,37)"/><text x="55.2205%" y="318.50">cudaMemcpy (libarctern.so)</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (567 samples, 25.74%)</title><rect x="54.9705%" y="324" width="25.7376%" height="15" fill="rgb(234,67,33)"/><text x="55.2205%" y="334.50">cudart::cudaApiMemcpy (libarctern.so)</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (567 samples, 25.74%)</title><rect x="54.9705%" y="340" width="25.7376%" height="15" fill="rgb(247,98,35)"/><text x="55.2205%" y="350.50">cudart::driverHelper::memcpyDispatch (lib..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (567 samples, 25.74%)</title><rect x="54.9705%" y="356" width="25.7376%" height="15" fill="rgb(247,138,52)"/><text x="55.2205%" y="366.50">cuMemcpy (libcuda.so.440.64.00)</text></g><g><title>0x7f2995b3f8c4 (libcuda.so.440.64.00) (567 samples, 25.74%)</title><rect x="54.9705%" y="372" width="25.7376%" height="15" fill="rgb(213,79,30)"/><text x="55.2205%" y="382.50">0x7f2995b3f8c4 (libcuda.so.440.64.00)</text></g><g><title>0x7f2995b3f612 (libcuda.so.440.64.00) (567 samples, 25.74%)</title><rect x="54.9705%" y="388" width="25.7376%" height="15" fill="rgb(246,177,23)"/><text x="55.2205%" y="398.50">0x7f2995b3f612 (libcuda.so.440.64.00)</text></g><g><title>0x7f2995c3ad88 (libcuda.so.440.64.00) (567 samples, 25.74%)</title><rect x="54.9705%" y="404" width="25.7376%" height="15" fill="rgb(230,62,27)"/><text x="55.2205%" y="414.50">0x7f2995c3ad88 (libcuda.so.440.64.00)</text></g><g><title>0x7f2995d60696 (libcuda.so.440.64.00) (87 samples, 3.95%)</title><rect x="76.7590%" y="420" width="3.9492%" height="15" fill="rgb(216,154,8)"/><text x="77.0090%" y="430.50">0x7f..</text></g><g><title>0x7f2995c3a5ce (libcuda.so.440.64.00) (87 samples, 3.95%)</title><rect x="76.7590%" y="436" width="3.9492%" height="15" fill="rgb(244,35,45)"/><text x="77.0090%" y="446.50">0x7f..</text></g><g><title>0x7f2a6ba4bf2d (libc-2.27.so) (27 samples, 1.23%)</title><rect x="80.7081%" y="308" width="1.2256%" height="15" fill="rgb(251,115,12)"/><text x="80.9581%" y="318.50"></text></g><g><title>arctern::gis::cuda::internal::ArrowWkbToGeometryVectorImpl (libarctern.so) (912 samples, 41.40%)</title><rect x="40.9896%" y="276" width="41.3981%" height="15" fill="rgb(240,54,50)"/><text x="41.2396%" y="286.50">arctern::gis::cuda::internal::ArrowWkbToGeometryVectorImpl (libarcte..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputInitialize (libarctern.so) (37 samples, 1.68%)</title><rect x="80.7081%" y="292" width="1.6795%" height="15" fill="rgb(233,84,52)"/><text x="80.9581%" y="302.50"></text></g><g><title>0x7f2995b78634 (libcuda.so.440.64.00) (94 samples, 4.27%)</title><rect x="83.3409%" y="420" width="4.2669%" height="15" fill="rgb(207,117,47)"/><text x="83.5909%" y="430.50">0x7f2..</text></g><g><title>arctern::gis::cuda::ArrowWkbToGeometryVector (libarctern.so) (1,046 samples, 47.48%)</title><rect x="40.9896%" y="260" width="47.4807%" height="15" fill="rgb(249,43,39)"/><text x="41.2396%" y="270.50">arctern::gis::cuda::ArrowWkbToGeometryVector (libarctern.so)</text></g><g><title>cudaMemcpy (libarctern.so) (118 samples, 5.36%)</title><rect x="83.1139%" y="276" width="5.3563%" height="15" fill="rgb(209,38,44)"/><text x="83.3639%" y="286.50">cudaMem..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (118 samples, 5.36%)</title><rect x="83.1139%" y="292" width="5.3563%" height="15" fill="rgb(236,212,23)"/><text x="83.3639%" y="302.50">cudart:..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (118 samples, 5.36%)</title><rect x="83.1139%" y="308" width="5.3563%" height="15" fill="rgb(242,79,21)"/><text x="83.3639%" y="318.50">cudart:..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (118 samples, 5.36%)</title><rect x="83.1139%" y="324" width="5.3563%" height="15" fill="rgb(211,96,35)"/><text x="83.3639%" y="334.50">cuMemcp..</text></g><g><title>0x7f2995b3f8c4 (libcuda.so.440.64.00) (118 samples, 5.36%)</title><rect x="83.1139%" y="340" width="5.3563%" height="15" fill="rgb(253,215,40)"/><text x="83.3639%" y="350.50">0x7f299..</text></g><g><title>0x7f2995b3f612 (libcuda.so.440.64.00) (118 samples, 5.36%)</title><rect x="83.1139%" y="356" width="5.3563%" height="15" fill="rgb(211,81,21)"/><text x="83.3639%" y="366.50">0x7f299..</text></g><g><title>0x7f2995c3ad25 (libcuda.so.440.64.00) (118 samples, 5.36%)</title><rect x="83.1139%" y="372" width="5.3563%" height="15" fill="rgb(208,190,38)"/><text x="83.3639%" y="382.50">0x7f299..</text></g><g><title>0x7f2995d60168 (libcuda.so.440.64.00) (113 samples, 5.13%)</title><rect x="83.3409%" y="388" width="5.1294%" height="15" fill="rgb(235,213,38)"/><text x="83.5909%" y="398.50">0x7f29..</text></g><g><title>0x7f2995c3a5ce (libcuda.so.440.64.00) (113 samples, 5.13%)</title><rect x="83.3409%" y="404" width="5.1294%" height="15" fill="rgb(237,122,38)"/><text x="83.5909%" y="414.50">0x7f29..</text></g><g><title>0x7f2995b78640 (libcuda.so.440.64.00) (58 samples, 2.63%)</title><rect x="89.7413%" y="452" width="2.6328%" height="15" fill="rgb(244,218,35)"/><text x="89.9913%" y="462.50">0x..</text></g><g><title>arctern::gis::cuda::GpuMemcpy&lt;double&gt; (libarctern.so) (72 samples, 3.27%)</title><rect x="89.3781%" y="292" width="3.2683%" height="15" fill="rgb(240,68,47)"/><text x="89.6281%" y="302.50">arc..</text></g><g><title>cudaMemcpy (libarctern.so) (72 samples, 3.27%)</title><rect x="89.3781%" y="308" width="3.2683%" height="15" fill="rgb(210,16,53)"/><text x="89.6281%" y="318.50">cud..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (72 samples, 3.27%)</title><rect x="89.3781%" y="324" width="3.2683%" height="15" fill="rgb(235,124,12)"/><text x="89.6281%" y="334.50">cud..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (72 samples, 3.27%)</title><rect x="89.3781%" y="340" width="3.2683%" height="15" fill="rgb(224,169,11)"/><text x="89.6281%" y="350.50">cud..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (72 samples, 3.27%)</title><rect x="89.3781%" y="356" width="3.2683%" height="15" fill="rgb(250,166,2)"/><text x="89.6281%" y="366.50">cuM..</text></g><g><title>0x7f2995b3f8c4 (libcuda.so.440.64.00) (72 samples, 3.27%)</title><rect x="89.3781%" y="372" width="3.2683%" height="15" fill="rgb(242,216,29)"/><text x="89.6281%" y="382.50">0x7..</text></g><g><title>0x7f2995b3f612 (libcuda.so.440.64.00) (72 samples, 3.27%)</title><rect x="89.3781%" y="388" width="3.2683%" height="15" fill="rgb(230,116,27)"/><text x="89.6281%" y="398.50">0x7..</text></g><g><title>0x7f2995c3ad25 (libcuda.so.440.64.00) (72 samples, 3.27%)</title><rect x="89.3781%" y="404" width="3.2683%" height="15" fill="rgb(228,99,48)"/><text x="89.6281%" y="414.50">0x7..</text></g><g><title>0x7f2995d60168 (libcuda.so.440.64.00) (67 samples, 3.04%)</title><rect x="89.6051%" y="420" width="3.0413%" height="15" fill="rgb(253,11,6)"/><text x="89.8551%" y="430.50">0x7..</text></g><g><title>0x7f2995c3a5ce (libcuda.so.440.64.00) (67 samples, 3.04%)</title><rect x="89.6051%" y="436" width="3.0413%" height="15" fill="rgb(247,143,39)"/><text x="89.8551%" y="446.50">0x7..</text></g><g><title>arctern::gis::cuda::GeometryVector::CreateReadGpuContext (libarctern.so) (104 samples, 4.72%)</title><rect x="88.4703%" y="276" width="4.7208%" height="15" fill="rgb(236,97,10)"/><text x="88.7203%" y="286.50">arcter..</text></g><g><title>arctern::gis::cuda::ST_Area (libarctern.so) (120 samples, 5.45%)</title><rect x="88.4703%" y="260" width="5.4471%" height="15" fill="rgb(233,208,19)"/><text x="88.7203%" y="270.50">arctern..</text></g><g><title>arctern::gis::cuda::ST_Area (libarctern.so) (1,262 samples, 57.29%)</title><rect x="38.1752%" y="244" width="57.2855%" height="15" fill="rgb(216,164,2)"/><text x="38.4252%" y="254.50">arctern::gis::cuda::ST_Area (libarctern.so)</text></g><g><title>cfree (libc-2.27.so) (33 samples, 1.50%)</title><rect x="93.9628%" y="260" width="1.4980%" height="15" fill="rgb(220,129,5)"/><text x="94.2128%" y="270.50"></text></g><g><title>munmap (libc-2.27.so) (33 samples, 1.50%)</title><rect x="93.9628%" y="276" width="1.4980%" height="15" fill="rgb(242,17,10)"/><text x="94.2128%" y="286.50"></text></g><g><title>ST_Area (arctern_core_.pyx:123) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="132" width="60.7808%" height="15" fill="rgb(242,107,0)"/><text x="38.4252%" y="142.50">ST_Area (arctern_core_.pyx:123)</text></g><g><title>ST_Area (arctern_core_.pyx:124) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="148" width="60.7808%" height="15" fill="rgb(251,28,31)"/><text x="38.4252%" y="158.50">ST_Area (arctern_core_.pyx:124)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="164" width="60.7808%" height="15" fill="rgb(233,223,10)"/><text x="38.4252%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="180" width="60.7808%" height="15" fill="rgb(215,21,27)"/><text x="38.4252%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="196" width="60.7808%" height="15" fill="rgb(232,23,21)"/><text x="38.4252%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275)</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="212" width="60.7808%" height="15" fill="rgb(244,5,23)"/><text x="38.4252%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712)</text></g><g><title>arctern::gis::ST_Area (libarctern.so) (1,339 samples, 60.78%)</title><rect x="38.1752%" y="228" width="60.7808%" height="15" fill="rgb(226,81,46)"/><text x="38.4252%" y="238.50">arctern::gis::ST_Area (libarctern.so)</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (77 samples, 3.50%)</title><rect x="95.4607%" y="244" width="3.4952%" height="15" fill="rgb(247,70,30)"/><text x="95.7107%" y="254.50">arc..</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (77 samples, 3.50%)</title><rect x="95.4607%" y="260" width="3.4952%" height="15" fill="rgb(212,68,19)"/><text x="95.7107%" y="270.50">arc..</text></g><g><title>arctern::gis::dispatch::WkbTypeScanner::Scan (libarctern.so) (77 samples, 3.50%)</title><rect x="95.4607%" y="276" width="3.4952%" height="15" fill="rgb(240,187,13)"/><text x="95.7107%" y="286.50">arc..</text></g><g><title>ST_Area (arctern/_wrapper_func.py:839) (1,373 samples, 62.32%)</title><rect x="36.6773%" y="116" width="62.3241%" height="15" fill="rgb(223,113,26)"/><text x="36.9273%" y="126.50">ST_Area (arctern/_wrapper_func.py:839)</text></g><g><title>&lt;module&gt; (profile_geo.py:157) (2,136 samples, 96.96%)</title><rect x="2.4058%" y="52" width="96.9587%" height="15" fill="rgb(206,192,2)"/><text x="2.6558%" y="62.50">&lt;module&gt; (profile_geo.py:157)</text></g><g><title>wrapper (profile_geo.py:30) (2,136 samples, 96.96%)</title><rect x="2.4058%" y="68" width="96.9587%" height="15" fill="rgb(241,108,4)"/><text x="2.6558%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Area (profile_geo.py:97) (2,136 samples, 96.96%)</title><rect x="2.4058%" y="84" width="96.9587%" height="15" fill="rgb(247,173,49)"/><text x="2.6558%" y="94.50">test_ST_Area (profile_geo.py:97)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (2,136 samples, 96.96%)</title><rect x="2.4058%" y="100" width="96.9587%" height="15" fill="rgb(224,114,35)"/><text x="2.6558%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>all (2,203 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>