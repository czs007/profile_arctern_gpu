<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="502" onload="init(evt)" viewBox="0 0 1200 502" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="502" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="485.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="485.00"> </text><svg id="frames" x="10" width="1180"><g><title>sanitize_array (pandas/core/construction.py:440) (16 samples, 1.03%)</title><rect x="1.2195%" y="116" width="1.0270%" height="15" fill="rgb(227,0,7)"/><text x="1.4695%" y="126.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (16 samples, 1.03%)</title><rect x="1.2195%" y="132" width="1.0270%" height="15" fill="rgb(217,0,24)"/><text x="1.4695%" y="142.50"></text></g><g><title>gen_st_distance_data (profile_geo.py:77) (34 samples, 2.18%)</title><rect x="0.8986%" y="68" width="2.1823%" height="15" fill="rgb(221,193,54)"/><text x="1.1486%" y="78.50">g..</text></g><g><title>_trans (profile_geo.py:43) (32 samples, 2.05%)</title><rect x="1.0270%" y="84" width="2.0539%" height="15" fill="rgb(248,212,6)"/><text x="1.2770%" y="94.50">_..</text></g><g><title>__init__ (pandas/core/series.py:305) (29 samples, 1.86%)</title><rect x="1.2195%" y="100" width="1.8614%" height="15" fill="rgb(208,68,35)"/><text x="1.4695%" y="110.50">_..</text></g><g><title>sanitize_array (pandas/core/construction.py:440) (21 samples, 1.35%)</title><rect x="3.2734%" y="116" width="1.3479%" height="15" fill="rgb(232,128,0)"/><text x="3.5234%" y="126.50"></text></g><g><title>maybe_convert_platform (pandas/core/dtypes/cast.py:74) (21 samples, 1.35%)</title><rect x="3.2734%" y="132" width="1.3479%" height="15" fill="rgb(207,160,47)"/><text x="3.5234%" y="142.50"></text></g><g><title>construct_1d_object_array_from_listlike (pandas/core/dtypes/cast.py:1479) (19 samples, 1.22%)</title><rect x="3.4018%" y="148" width="1.2195%" height="15" fill="rgb(228,23,34)"/><text x="3.6518%" y="158.50"></text></g><g><title>array_assign_subscript (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (19 samples, 1.22%)</title><rect x="3.4018%" y="164" width="1.2195%" height="15" fill="rgb(218,30,26)"/><text x="3.6518%" y="174.50"></text></g><g><title>PyArray_CopyObject (numpy/core/_multiarray_umath.cpython-38-x86_64-linux-gnu.so) (19 samples, 1.22%)</title><rect x="3.4018%" y="180" width="1.2195%" height="15" fill="rgb(220,122,19)"/><text x="3.6518%" y="190.50"></text></g><g><title>&lt;module&gt; (profile_geo.py:154) (70 samples, 4.49%)</title><rect x="0.8986%" y="52" width="4.4929%" height="15" fill="rgb(250,228,42)"/><text x="1.1486%" y="62.50">&lt;modu..</text></g><g><title>gen_st_distance_data (profile_geo.py:78) (36 samples, 2.31%)</title><rect x="3.0809%" y="68" width="2.3107%" height="15" fill="rgb(240,193,28)"/><text x="3.3309%" y="78.50">g..</text></g><g><title>_trans (profile_geo.py:43) (34 samples, 2.18%)</title><rect x="3.2092%" y="84" width="2.1823%" height="15" fill="rgb(216,20,37)"/><text x="3.4592%" y="94.50">_..</text></g><g><title>__init__ (pandas/core/series.py:305) (33 samples, 2.12%)</title><rect x="3.2734%" y="100" width="2.1181%" height="15" fill="rgb(206,188,39)"/><text x="3.5234%" y="110.50">_..</text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (28 samples, 1.80%)</title><rect x="20.0257%" y="292" width="1.7972%" height="15" fill="rgb(217,207,13)"/><text x="20.2757%" y="302.50">a..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (28 samples, 1.80%)</title><rect x="20.0257%" y="308" width="1.7972%" height="15" fill="rgb(231,73,38)"/><text x="20.2757%" y="318.50">a..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (28 samples, 1.80%)</title><rect x="20.0257%" y="324" width="1.7972%" height="15" fill="rgb(225,20,46)"/><text x="20.2757%" y="334.50">a..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (28 samples, 1.80%)</title><rect x="20.0257%" y="340" width="1.7972%" height="15" fill="rgb(210,31,41)"/><text x="20.2757%" y="350.50">j..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (28 samples, 1.80%)</title><rect x="20.0257%" y="356" width="1.7972%" height="15" fill="rgb(221,200,47)"/><text x="20.2757%" y="366.50">i..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (28 samples, 1.80%)</title><rect x="20.0257%" y="372" width="1.7972%" height="15" fill="rgb(226,26,5)"/><text x="20.2757%" y="382.50">j..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (28 samples, 1.80%)</title><rect x="20.0257%" y="388" width="1.7972%" height="15" fill="rgb(249,33,26)"/><text x="20.2757%" y="398.50">j..</text></g><g><title>memcpy (string3.h:52) (28 samples, 1.80%)</title><rect x="20.0257%" y="404" width="1.7972%" height="15" fill="rgb(235,183,28)"/><text x="20.2757%" y="414.50">m..</text></g><g><title>arrow::Status::Status (libarrow_python.so.16.0.0) (27 samples, 1.73%)</title><rect x="21.8228%" y="292" width="1.7330%" height="15" fill="rgb(221,5,38)"/><text x="22.0728%" y="302.50"></text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (210 samples, 13.48%)</title><rect x="13.6714%" y="276" width="13.4788%" height="15" fill="rgb(247,18,42)"/><text x="13.9214%" y="286.50">arrow::BaseBinaryBui..</text></g><g><title>memcpy (libc-2.27.so) (56 samples, 3.59%)</title><rect x="23.5558%" y="292" width="3.5944%" height="15" fill="rgb(241,131,45)"/><text x="23.8058%" y="302.50">memc..</text></g><g><title>arrow::Status::Status (libarrow_python.so.16.0.0) (18 samples, 1.16%)</title><rect x="27.1502%" y="276" width="1.1553%" height="15" fill="rgb(249,31,29)"/><text x="27.4002%" y="286.50"></text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (352 samples, 22.59%)</title><rect x="10.8472%" y="260" width="22.5931%" height="15" fill="rgb(225,111,53)"/><text x="11.0972%" y="270.50">arrow::py::detail::BuilderAppend (li..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (71 samples, 4.56%)</title><rect x="28.8832%" y="276" width="4.5571%" height="15" fill="rgb(238,160,17)"/><text x="29.1332%" y="286.50">arrow..</text></g><g><title>arrow::py::PyBytesView::FromBinary (libarrow_python.so.16.0.0) (26 samples, 1.67%)</title><rect x="31.7715%" y="292" width="1.6688%" height="15" fill="rgb(214,148,48)"/><text x="32.0215%" y="302.50"></text></g><g><title>ST_Distance (arctern/_wrapper_func.py:768) (447 samples, 28.69%)</title><rect x="5.4557%" y="116" width="28.6906%" height="15" fill="rgb(232,36,49)"/><text x="5.7057%" y="126.50">ST_Distance (arctern/_wrapper_func.py:768)</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (447 samples, 28.69%)</title><rect x="5.4557%" y="132" width="28.6906%" height="15" fill="rgb(209,103,24)"/><text x="5.7057%" y="142.50">array (pyarrow/lib.cpython-38-x86_64-linux-gnu..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (447 samples, 28.69%)</title><rect x="5.4557%" y="148" width="28.6906%" height="15" fill="rgb(229,88,8)"/><text x="5.7057%" y="158.50">lib__ndarray_to_array (pyarrow/lib.cpython-38-..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (447 samples, 28.69%)</title><rect x="5.4557%" y="164" width="28.6906%" height="15" fill="rgb(213,181,19)"/><text x="5.7057%" y="174.50">arrow::py::NdarrayToArrow (libarrow_python.so...</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (447 samples, 28.69%)</title><rect x="5.4557%" y="180" width="28.6906%" height="15" fill="rgb(254,191,54)"/><text x="5.7057%" y="190.50">arrow::py::NumPyConverter::Convert (libarrow_p..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (447 samples, 28.69%)</title><rect x="5.4557%" y="196" width="28.6906%" height="15" fill="rgb(241,83,37)"/><text x="5.7057%" y="206.50">arrow::py::ConvertPySequence (libarrow_python...</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (447 samples, 28.69%)</title><rect x="5.4557%" y="212" width="28.6906%" height="15" fill="rgb(233,36,39)"/><text x="5.7057%" y="222.50">arrow::py::TypedConverter&lt;arrow::BinaryType, a..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (447 samples, 28.69%)</title><rect x="5.4557%" y="228" width="28.6906%" height="15" fill="rgb(226,3,54)"/><text x="5.7057%" y="238.50">arrow::py::internal::VisitSequenceGeneric&lt;arro..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (403 samples, 25.87%)</title><rect x="8.2798%" y="244" width="25.8665%" height="15" fill="rgb(245,192,40)"/><text x="8.5298%" y="254.50">arrow::py::TypedConverter&lt;arrow::BinaryTy..</text></g><g><title>0x7f108433878b (libc-2.27.so) (23 samples, 1.48%)</title><rect x="49.6149%" y="420" width="1.4763%" height="15" fill="rgb(238,167,29)"/><text x="49.8649%" y="430.50"></text></g><g><title>arrow::BufferBuilder::Resize (libarrow_python.so.16.0.0) (47 samples, 3.02%)</title><rect x="48.5879%" y="292" width="3.0167%" height="15" fill="rgb(232,182,51)"/><text x="48.8379%" y="302.50">arr..</text></g><g><title>arrow::PoolBuffer::Resize (libarrow.so.16.0.0) (47 samples, 3.02%)</title><rect x="48.5879%" y="308" width="3.0167%" height="15" fill="rgb(231,60,39)"/><text x="48.8379%" y="318.50">arr..</text></g><g><title>arrow::BaseMemoryPoolImpl&lt;arrow::(anonymous namespace)::JemallocAllocator&gt;::Reallocate (libarrow.so.16.0.0) (47 samples, 3.02%)</title><rect x="48.5879%" y="324" width="3.0167%" height="15" fill="rgb(208,69,12)"/><text x="48.8379%" y="334.50">arr..</text></g><g><title>je_arrow_rallocx (jemalloc.c:3279) (47 samples, 3.02%)</title><rect x="48.5879%" y="340" width="3.0167%" height="15" fill="rgb(235,93,37)"/><text x="48.8379%" y="350.50">je_..</text></g><g><title>iralloct (jemalloc_internal_inlines_c.h:192) (47 samples, 3.02%)</title><rect x="48.5879%" y="356" width="3.0167%" height="15" fill="rgb(213,116,39)"/><text x="48.8379%" y="366.50">ira..</text></g><g><title>je_arrow_private_je_arena_ralloc (arena.c:1823) (47 samples, 3.02%)</title><rect x="48.5879%" y="372" width="3.0167%" height="15" fill="rgb(222,207,29)"/><text x="48.8379%" y="382.50">je_..</text></g><g><title>je_arrow_private_je_large_ralloc (large.c:312) (47 samples, 3.02%)</title><rect x="48.5879%" y="388" width="3.0167%" height="15" fill="rgb(206,96,30)"/><text x="48.8379%" y="398.50">je_..</text></g><g><title>memcpy (string3.h:52) (47 samples, 3.02%)</title><rect x="48.5879%" y="404" width="3.0167%" height="15" fill="rgb(218,138,4)"/><text x="48.8379%" y="414.50">mem..</text></g><g><title>arrow::Status::Status (libarrow_python.so.16.0.0) (35 samples, 2.25%)</title><rect x="51.6046%" y="292" width="2.2465%" height="15" fill="rgb(250,191,14)"/><text x="51.8546%" y="302.50">a..</text></g><g><title>arrow::BaseBinaryBuilder&lt;arrow::BinaryType&gt;::Append (libarrow_python.so.16.0.0) (214 samples, 13.74%)</title><rect x="42.5546%" y="276" width="13.7356%" height="15" fill="rgb(239,60,40)"/><text x="42.8046%" y="286.50">arrow::BaseBinaryBuil..</text></g><g><title>memcpy (libc-2.27.so) (38 samples, 2.44%)</title><rect x="53.8511%" y="292" width="2.4390%" height="15" fill="rgb(206,27,48)"/><text x="54.1011%" y="302.50">me..</text></g><g><title>arrow::py::detail::BuilderAppend (libarrow_python.so.16.0.0) (348 samples, 22.34%)</title><rect x="39.8588%" y="260" width="22.3363%" height="15" fill="rgb(225,35,8)"/><text x="40.1088%" y="270.50">arrow::py::detail::BuilderAppend (l..</text></g><g><title>arrow::py::PyBytesView::FromString (libarrow_python.so.16.0.0) (70 samples, 4.49%)</title><rect x="57.7022%" y="276" width="4.4929%" height="15" fill="rgb(250,213,24)"/><text x="57.9522%" y="286.50">arrow..</text></g><g><title>arrow::py::PyBytesView::FromBinary (libarrow_python.so.16.0.0) (31 samples, 1.99%)</title><rect x="60.2054%" y="292" width="1.9897%" height="15" fill="rgb(247,123,22)"/><text x="60.4554%" y="302.50">a..</text></g><g><title>ST_Distance (arctern/_wrapper_func.py:769) (445 samples, 28.56%)</title><rect x="34.1463%" y="116" width="28.5623%" height="15" fill="rgb(231,138,38)"/><text x="34.3963%" y="126.50">ST_Distance (arctern/_wrapper_func.py:769)</text></g><g><title>array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (445 samples, 28.56%)</title><rect x="34.1463%" y="132" width="28.5623%" height="15" fill="rgb(231,145,46)"/><text x="34.3963%" y="142.50">array (pyarrow/lib.cpython-38-x86_64-linux-gnu..</text></g><g><title>lib__ndarray_to_array (pyarrow/lib.cpython-38-x86_64-linux-gnu.so) (445 samples, 28.56%)</title><rect x="34.1463%" y="148" width="28.5623%" height="15" fill="rgb(251,118,11)"/><text x="34.3963%" y="158.50">lib__ndarray_to_array (pyarrow/lib.cpython-38-..</text></g><g><title>arrow::py::NdarrayToArrow (libarrow_python.so.16.0.0) (445 samples, 28.56%)</title><rect x="34.1463%" y="164" width="28.5623%" height="15" fill="rgb(217,147,25)"/><text x="34.3963%" y="174.50">arrow::py::NdarrayToArrow (libarrow_python.so...</text></g><g><title>arrow::py::NumPyConverter::Convert (libarrow_python.so.16.0.0) (445 samples, 28.56%)</title><rect x="34.1463%" y="180" width="28.5623%" height="15" fill="rgb(247,81,37)"/><text x="34.3963%" y="190.50">arrow::py::NumPyConverter::Convert (libarrow_p..</text></g><g><title>arrow::py::ConvertPySequence (libarrow_python.so.16.0.0) (445 samples, 28.56%)</title><rect x="34.1463%" y="196" width="28.5623%" height="15" fill="rgb(209,12,38)"/><text x="34.3963%" y="206.50">arrow::py::ConvertPySequence (libarrow_python...</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple (libarrow_python.so.16.0.0) (445 samples, 28.56%)</title><rect x="34.1463%" y="212" width="28.5623%" height="15" fill="rgb(227,1,9)"/><text x="34.3963%" y="222.50">arrow::py::TypedConverter&lt;arrow::BinaryType, a..</text></g><g><title>arrow::py::internal::VisitSequenceGeneric&lt;arrow::Status arrow::py::internal::VisitSequence&lt;arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&gt;(_object*, arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendMultiple(_object*, long)::{lambda(_object*, bool*)#1}&amp;&amp;)::{lambda(_object*, long, bool*)#1}&gt; (libarrow_python.so.16.0.0) (445 samples, 28.56%)</title><rect x="34.1463%" y="228" width="28.5623%" height="15" fill="rgb(248,47,43)"/><text x="34.3963%" y="238.50">arrow::py::internal::VisitSequenceGeneric&lt;arro..</text></g><g><title>arrow::py::TypedConverter&lt;arrow::BinaryType, arrow::py::BinaryLikeConverter&lt;arrow::BinaryType, (arrow::py::NullCoding)1&gt;, (arrow::py::NullCoding)1&gt;::AppendSingle (libarrow_python.so.16.0.0) (404 samples, 25.93%)</title><rect x="36.7779%" y="244" width="25.9307%" height="15" fill="rgb(221,10,30)"/><text x="37.0279%" y="254.50">arrow::py::TypedConverter&lt;arrow::BinaryTy..</text></g><g><title>0x7f108440bf2d (libc-2.27.so) (20 samples, 1.28%)</title><rect x="64.0565%" y="260" width="1.2837%" height="15" fill="rgb(210,229,1)"/><text x="64.3065%" y="270.50"></text></g><g><title>0x7f1052f37634 (libcuda.so.440.64.00) (18 samples, 1.16%)</title><rect x="66.1104%" y="452" width="1.1553%" height="15" fill="rgb(222,148,37)"/><text x="66.3604%" y="462.50"></text></g><g><title>0x7f105311f696 (libcuda.so.440.64.00) (23 samples, 1.48%)</title><rect x="66.1104%" y="420" width="1.4763%" height="15" fill="rgb(234,67,33)"/><text x="66.3604%" y="430.50"></text></g><g><title>0x7f1052ff95ce (libcuda.so.440.64.00) (23 samples, 1.48%)</title><rect x="66.1104%" y="436" width="1.4763%" height="15" fill="rgb(247,98,35)"/><text x="66.3604%" y="446.50"></text></g><g><title>cudaMemcpy (libarctern.so) (28 samples, 1.80%)</title><rect x="65.8537%" y="308" width="1.7972%" height="15" fill="rgb(247,138,52)"/><text x="66.1037%" y="318.50">c..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (28 samples, 1.80%)</title><rect x="65.8537%" y="324" width="1.7972%" height="15" fill="rgb(213,79,30)"/><text x="66.1037%" y="334.50">c..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (28 samples, 1.80%)</title><rect x="65.8537%" y="340" width="1.7972%" height="15" fill="rgb(246,177,23)"/><text x="66.1037%" y="350.50">c..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (28 samples, 1.80%)</title><rect x="65.8537%" y="356" width="1.7972%" height="15" fill="rgb(230,62,27)"/><text x="66.1037%" y="366.50">c..</text></g><g><title>0x7f1052efe8c4 (libcuda.so.440.64.00) (28 samples, 1.80%)</title><rect x="65.8537%" y="372" width="1.7972%" height="15" fill="rgb(216,154,8)"/><text x="66.1037%" y="382.50">0..</text></g><g><title>0x7f1052efe612 (libcuda.so.440.64.00) (28 samples, 1.80%)</title><rect x="65.8537%" y="388" width="1.7972%" height="15" fill="rgb(244,35,45)"/><text x="66.1037%" y="398.50">0..</text></g><g><title>0x7f1052ff9d88 (libcuda.so.440.64.00) (28 samples, 1.80%)</title><rect x="65.8537%" y="404" width="1.7972%" height="15" fill="rgb(251,115,12)"/><text x="66.1037%" y="414.50">0..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputEvolveWith (libarctern.so) (136 samples, 8.73%)</title><rect x="65.7253%" y="292" width="8.7291%" height="15" fill="rgb(240,54,50)"/><text x="65.9753%" y="302.50">arctern::gis..</text></g><g><title>std::vector&lt;double, std::allocator&lt;double&gt; &gt;::_M_default_append (libarctern.so) (106 samples, 6.80%)</title><rect x="67.6508%" y="308" width="6.8036%" height="15" fill="rgb(233,84,52)"/><text x="67.9008%" y="318.50">std::vect..</text></g><g><title>0x7f108440bf2d (libc-2.27.so) (106 samples, 6.80%)</title><rect x="67.6508%" y="324" width="6.8036%" height="15" fill="rgb(207,117,47)"/><text x="67.9008%" y="334.50">0x7f10844..</text></g><g><title>0x7f1052f37634 (libcuda.so.440.64.00) (26 samples, 1.67%)</title><rect x="75.0963%" y="452" width="1.6688%" height="15" fill="rgb(249,43,39)"/><text x="75.3463%" y="462.50"></text></g><g><title>0x7f105311f696 (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="75.0963%" y="420" width="2.0539%" height="15" fill="rgb(209,38,44)"/><text x="75.3463%" y="430.50">0..</text></g><g><title>0x7f1052ff95ce (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="75.0963%" y="436" width="2.0539%" height="15" fill="rgb(236,212,23)"/><text x="75.3463%" y="446.50">0..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputFinalizeWith (libarctern.so) (43 samples, 2.76%)</title><rect x="74.4544%" y="292" width="2.7599%" height="15" fill="rgb(242,79,21)"/><text x="74.7044%" y="302.50">ar..</text></g><g><title>cudaMemcpy (libarctern.so) (43 samples, 2.76%)</title><rect x="74.4544%" y="308" width="2.7599%" height="15" fill="rgb(211,96,35)"/><text x="74.7044%" y="318.50">cu..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (43 samples, 2.76%)</title><rect x="74.4544%" y="324" width="2.7599%" height="15" fill="rgb(253,215,40)"/><text x="74.7044%" y="334.50">cu..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (43 samples, 2.76%)</title><rect x="74.4544%" y="340" width="2.7599%" height="15" fill="rgb(211,81,21)"/><text x="74.7044%" y="350.50">cu..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (43 samples, 2.76%)</title><rect x="74.4544%" y="356" width="2.7599%" height="15" fill="rgb(208,190,38)"/><text x="74.7044%" y="366.50">cu..</text></g><g><title>0x7f1052efe8c4 (libcuda.so.440.64.00) (43 samples, 2.76%)</title><rect x="74.4544%" y="372" width="2.7599%" height="15" fill="rgb(235,213,38)"/><text x="74.7044%" y="382.50">0x..</text></g><g><title>0x7f1052efe612 (libcuda.so.440.64.00) (43 samples, 2.76%)</title><rect x="74.4544%" y="388" width="2.7599%" height="15" fill="rgb(237,122,38)"/><text x="74.7044%" y="398.50">0x..</text></g><g><title>0x7f1052ff9d88 (libcuda.so.440.64.00) (43 samples, 2.76%)</title><rect x="74.4544%" y="404" width="2.7599%" height="15" fill="rgb(244,218,35)"/><text x="74.7044%" y="414.50">0x..</text></g><g><title>0x7f108440bf2d (libc-2.27.so) (47 samples, 3.02%)</title><rect x="77.2144%" y="308" width="3.0167%" height="15" fill="rgb(240,68,47)"/><text x="77.4644%" y="318.50">0x7..</text></g><g><title>arctern::gis::cuda::internal::ArrowWkbToGeometryVectorImpl (libarctern.so) (260 samples, 16.69%)</title><rect x="65.3402%" y="276" width="16.6881%" height="15" fill="rgb(210,16,53)"/><text x="65.5902%" y="286.50">arctern::gis::cuda::intern..</text></g><g><title>arctern::gis::cuda::GeometryVector::OutputInitialize (libarctern.so) (75 samples, 4.81%)</title><rect x="77.2144%" y="292" width="4.8139%" height="15" fill="rgb(235,124,12)"/><text x="77.4644%" y="302.50">arcter..</text></g><g><title>std::vector&lt;int, std::allocator&lt;int&gt; &gt;::_M_default_append (libarctern.so) (28 samples, 1.80%)</title><rect x="80.2311%" y="308" width="1.7972%" height="15" fill="rgb(224,169,11)"/><text x="80.4811%" y="318.50">s..</text></g><g><title>0x7f108440bf2d (libc-2.27.so) (28 samples, 1.80%)</title><rect x="80.2311%" y="324" width="1.7972%" height="15" fill="rgb(250,166,2)"/><text x="80.4811%" y="334.50">0..</text></g><g><title>0x7f1052f37634 (libcuda.so.440.64.00) (37 samples, 2.37%)</title><rect x="83.5687%" y="420" width="2.3748%" height="15" fill="rgb(242,216,29)"/><text x="83.8187%" y="430.50">0x..</text></g><g><title>arctern::gis::cuda::ArrowWkbToGeometryVector (libarctern.so) (331 samples, 21.25%)</title><rect x="65.3402%" y="260" width="21.2452%" height="15" fill="rgb(230,116,27)"/><text x="65.5902%" y="270.50">arctern::gis::cuda::ArrowWkbToGeom..</text></g><g><title>cudaMemcpy (libarctern.so) (59 samples, 3.79%)</title><rect x="82.7985%" y="276" width="3.7869%" height="15" fill="rgb(228,99,48)"/><text x="83.0485%" y="286.50">cuda..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (59 samples, 3.79%)</title><rect x="82.7985%" y="292" width="3.7869%" height="15" fill="rgb(253,11,6)"/><text x="83.0485%" y="302.50">cuda..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (59 samples, 3.79%)</title><rect x="82.7985%" y="308" width="3.7869%" height="15" fill="rgb(247,143,39)"/><text x="83.0485%" y="318.50">cuda..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (59 samples, 3.79%)</title><rect x="82.7985%" y="324" width="3.7869%" height="15" fill="rgb(236,97,10)"/><text x="83.0485%" y="334.50">cuMe..</text></g><g><title>0x7f1052efe8c4 (libcuda.so.440.64.00) (59 samples, 3.79%)</title><rect x="82.7985%" y="340" width="3.7869%" height="15" fill="rgb(233,208,19)"/><text x="83.0485%" y="350.50">0x7f..</text></g><g><title>0x7f1052efe612 (libcuda.so.440.64.00) (59 samples, 3.79%)</title><rect x="82.7985%" y="356" width="3.7869%" height="15" fill="rgb(216,164,2)"/><text x="83.0485%" y="366.50">0x7f..</text></g><g><title>0x7f1052ff9d25 (libcuda.so.440.64.00) (59 samples, 3.79%)</title><rect x="82.7985%" y="372" width="3.7869%" height="15" fill="rgb(220,129,5)"/><text x="83.0485%" y="382.50">0x7f..</text></g><g><title>0x7f105311f168 (libcuda.so.440.64.00) (48 samples, 3.08%)</title><rect x="83.5045%" y="388" width="3.0809%" height="15" fill="rgb(242,17,10)"/><text x="83.7545%" y="398.50">0x7..</text></g><g><title>0x7f1052ff95ce (libcuda.so.440.64.00) (47 samples, 3.02%)</title><rect x="83.5687%" y="404" width="3.0167%" height="15" fill="rgb(242,107,0)"/><text x="83.8187%" y="414.50">0x7..</text></g><g><title>arctern::gis::cuda::GpuMemcpy&lt;double&gt; (libarctern.so) (32 samples, 2.05%)</title><rect x="86.9705%" y="292" width="2.0539%" height="15" fill="rgb(251,28,31)"/><text x="87.2205%" y="302.50">a..</text></g><g><title>cudaMemcpy (libarctern.so) (32 samples, 2.05%)</title><rect x="86.9705%" y="308" width="2.0539%" height="15" fill="rgb(233,223,10)"/><text x="87.2205%" y="318.50">c..</text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (32 samples, 2.05%)</title><rect x="86.9705%" y="324" width="2.0539%" height="15" fill="rgb(215,21,27)"/><text x="87.2205%" y="334.50">c..</text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (32 samples, 2.05%)</title><rect x="86.9705%" y="340" width="2.0539%" height="15" fill="rgb(232,23,21)"/><text x="87.2205%" y="350.50">c..</text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="356" width="2.0539%" height="15" fill="rgb(244,5,23)"/><text x="87.2205%" y="366.50">c..</text></g><g><title>0x7f1052efe8c4 (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="372" width="2.0539%" height="15" fill="rgb(226,81,46)"/><text x="87.2205%" y="382.50">0..</text></g><g><title>0x7f1052efe612 (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="388" width="2.0539%" height="15" fill="rgb(247,70,30)"/><text x="87.2205%" y="398.50">0..</text></g><g><title>0x7f1052ff9d25 (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="404" width="2.0539%" height="15" fill="rgb(212,68,19)"/><text x="87.2205%" y="414.50">0..</text></g><g><title>0x7f105311f168 (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="420" width="2.0539%" height="15" fill="rgb(240,187,13)"/><text x="87.2205%" y="430.50">0..</text></g><g><title>0x7f1052ff95ce (libcuda.so.440.64.00) (32 samples, 2.05%)</title><rect x="86.9705%" y="436" width="2.0539%" height="15" fill="rgb(223,113,26)"/><text x="87.2205%" y="446.50">0..</text></g><g><title>0x7f1052f37640 (libcuda.so.440.64.00) (30 samples, 1.93%)</title><rect x="87.0988%" y="452" width="1.9255%" height="15" fill="rgb(206,192,2)"/><text x="87.3488%" y="462.50">0..</text></g><g><title>0x7f1052efe8c4 (libcuda.so.440.64.00) (16 samples, 1.03%)</title><rect x="89.0244%" y="372" width="1.0270%" height="15" fill="rgb(241,108,4)"/><text x="89.2744%" y="382.50"></text></g><g><title>0x7f1052efe612 (libcuda.so.440.64.00) (16 samples, 1.03%)</title><rect x="89.0244%" y="388" width="1.0270%" height="15" fill="rgb(247,173,49)"/><text x="89.2744%" y="398.50"></text></g><g><title>0x7f1052ff9d25 (libcuda.so.440.64.00) (16 samples, 1.03%)</title><rect x="89.0244%" y="404" width="1.0270%" height="15" fill="rgb(224,114,35)"/><text x="89.2744%" y="414.50"></text></g><g><title>0x7f105311f168 (libcuda.so.440.64.00) (16 samples, 1.03%)</title><rect x="89.0244%" y="420" width="1.0270%" height="15" fill="rgb(245,159,27)"/><text x="89.2744%" y="430.50"></text></g><g><title>0x7f1052ff95ce (libcuda.so.440.64.00) (16 samples, 1.03%)</title><rect x="89.0244%" y="436" width="1.0270%" height="15" fill="rgb(245,172,44)"/><text x="89.2744%" y="446.50"></text></g><g><title>arctern::gis::cuda::GeometryVector::CreateReadGpuContext (libarctern.so) (55 samples, 3.53%)</title><rect x="86.5854%" y="276" width="3.5302%" height="15" fill="rgb(236,23,11)"/><text x="86.8354%" y="286.50">arc..</text></g><g><title>arctern::gis::cuda::GpuMemcpy&lt;int&gt; (libarctern.so) (17 samples, 1.09%)</title><rect x="89.0244%" y="292" width="1.0911%" height="15" fill="rgb(205,117,38)"/><text x="89.2744%" y="302.50"></text></g><g><title>cudaMemcpy (libarctern.so) (17 samples, 1.09%)</title><rect x="89.0244%" y="308" width="1.0911%" height="15" fill="rgb(237,72,25)"/><text x="89.2744%" y="318.50"></text></g><g><title>cudart::cudaApiMemcpy (libarctern.so) (17 samples, 1.09%)</title><rect x="89.0244%" y="324" width="1.0911%" height="15" fill="rgb(244,70,9)"/><text x="89.2744%" y="334.50"></text></g><g><title>cudart::driverHelper::memcpyDispatch (libarctern.so) (17 samples, 1.09%)</title><rect x="89.0244%" y="340" width="1.0911%" height="15" fill="rgb(217,125,39)"/><text x="89.2744%" y="350.50"></text></g><g><title>cuMemcpy (libcuda.so.440.64.00) (17 samples, 1.09%)</title><rect x="89.0244%" y="356" width="1.0911%" height="15" fill="rgb(235,36,10)"/><text x="89.2744%" y="366.50"></text></g><g><title>arctern::gis::cuda::ST_Distance (libarctern.so) (74 samples, 4.75%)</title><rect x="86.5854%" y="260" width="4.7497%" height="15" fill="rgb(251,123,47)"/><text x="86.8354%" y="270.50">arcter..</text></g><g><title>arctern::gis::cuda::ST_Distance (libarctern.so) (471 samples, 30.23%)</title><rect x="62.7728%" y="244" width="30.2311%" height="15" fill="rgb(221,13,13)"/><text x="63.0228%" y="254.50">arctern::gis::cuda::ST_Distance (libarctern.so)</text></g><g><title>cfree (libc-2.27.so) (26 samples, 1.67%)</title><rect x="91.3350%" y="260" width="1.6688%" height="15" fill="rgb(238,131,9)"/><text x="91.5850%" y="270.50"></text></g><g><title>munmap (libc-2.27.so) (26 samples, 1.67%)</title><rect x="91.3350%" y="276" width="1.6688%" height="15" fill="rgb(211,50,8)"/><text x="91.5850%" y="286.50"></text></g><g><title>ST_Distance (arctern/_wrapper_func.py:770) (554 samples, 35.56%)</title><rect x="62.7086%" y="116" width="35.5584%" height="15" fill="rgb(245,182,24)"/><text x="62.9586%" y="126.50">ST_Distance (arctern/_wrapper_func.py:770)</text></g><g><title>ST_Distance (arctern_core_.pyx:117) (553 samples, 35.49%)</title><rect x="62.7728%" y="132" width="35.4942%" height="15" fill="rgb(242,14,37)"/><text x="63.0228%" y="142.50">ST_Distance (arctern_core_.pyx:117)</text></g><g><title>ST_Distance (arctern_core_.pyx:118) (553 samples, 35.49%)</title><rect x="62.7728%" y="148" width="35.4942%" height="15" fill="rgb(246,228,12)"/><text x="63.0228%" y="158.50">ST_Distance (arctern_core_.pyx:118)</text></g><g><title>std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319) (553 samples, 35.49%)</title><rect x="62.7728%" y="164" width="35.4942%" height="15" fill="rgb(213,55,15)"/><text x="63.0228%" y="174.50">std::shared_ptr&lt;arrow::Array&gt;::operator= (shared_ptr.h:319)</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::operator= (shared_ptr_base.h:1213) (553 samples, 35.49%)</title><rect x="62.7728%" y="180" width="35.4942%" height="15" fill="rgb(209,9,3)"/><text x="63.0228%" y="190.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2..</text></g><g><title>std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2&gt;::swap (shared_ptr_base.h:1275) (553 samples, 35.49%)</title><rect x="62.7728%" y="196" width="35.4942%" height="15" fill="rgb(230,59,30)"/><text x="63.0228%" y="206.50">std::__shared_ptr&lt;arrow::Array, (__gnu_cxx::_Lock_policy)2..</text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (shared_ptr_base.h:712) (553 samples, 35.49%)</title><rect x="62.7728%" y="212" width="35.4942%" height="15" fill="rgb(209,121,21)"/><text x="63.0228%" y="222.50">std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_swap (..</text></g><g><title>arctern::gis::ST_Distance (libarctern.so) (553 samples, 35.49%)</title><rect x="62.7728%" y="228" width="35.4942%" height="15" fill="rgb(220,109,13)"/><text x="63.0228%" y="238.50">arctern::gis::ST_Distance (libarctern.so)</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (82 samples, 5.26%)</title><rect x="93.0039%" y="244" width="5.2632%" height="15" fill="rgb(232,18,1)"/><text x="93.2539%" y="254.50">arcter..</text></g><g><title>arctern::gis::dispatch::MaskResult::AppendFilter (libarctern.so) (82 samples, 5.26%)</title><rect x="93.0039%" y="260" width="5.2632%" height="15" fill="rgb(215,41,42)"/><text x="93.2539%" y="270.50">arcter..</text></g><g><title>arctern::gis::dispatch::WkbTypeScanner::Scan (libarctern.so) (82 samples, 5.26%)</title><rect x="93.0039%" y="276" width="5.2632%" height="15" fill="rgb(224,123,36)"/><text x="93.2539%" y="286.50">arcter..</text></g><g><title>&lt;module&gt; (profile_geo.py:157) (1,450 samples, 93.07%)</title><rect x="5.3915%" y="52" width="93.0680%" height="15" fill="rgb(240,125,3)"/><text x="5.6415%" y="62.50">&lt;module&gt; (profile_geo.py:157)</text></g><g><title>wrapper (profile_geo.py:30) (1,450 samples, 93.07%)</title><rect x="5.3915%" y="68" width="93.0680%" height="15" fill="rgb(205,98,50)"/><text x="5.6415%" y="78.50">wrapper (profile_geo.py:30)</text></g><g><title>test_ST_Distance (profile_geo.py:93) (1,450 samples, 93.07%)</title><rect x="5.3915%" y="84" width="93.0680%" height="15" fill="rgb(205,185,37)"/><text x="5.6415%" y="94.50">test_ST_Distance (profile_geo.py:93)</text></g><g><title>wrapper (arctern/_wrapper_func.py:99) (1,449 samples, 93.00%)</title><rect x="5.4557%" y="100" width="93.0039%" height="15" fill="rgb(238,207,15)"/><text x="5.7057%" y="110.50">wrapper (arctern/_wrapper_func.py:99)</text></g><g><title>all (1,558 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="46.50"></text></g></svg></svg>